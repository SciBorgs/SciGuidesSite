{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#this-is-sciguides","title":"This is SciGuides!","text":"<p>Welcome to your self-guided tour in the robotics world!</p>"},{"location":"#best-practices","title":"Best Practices","text":"<p>As you go through these tutorials and projects, here are some practices you should try to follow:</p> <ol> <li>Go through all example code thoroughly until you understand it. If it's not clicking, ask for help.</li> <li>If there's ever a concept that you don't understand, ask for help!</li> <li>Do the work on your own. You can talk to your friends about concepts, but for the most part, go at your own pace, and try to understand the concepts on your own before asking for help.<ol> <li>Some projects are explicitly made to work as group projects. In those situations, you can of course work with a group, but still make sure that you're writing your section on your own!</li> </ol> </li> <li>When you ask for help, you have a few options:<ol> <li>Maybe there's someone you're working with who you can ask, and if they know the answer, that's great. </li> <li>Ideally, you also have someone who's a more experienced programmer who can help you when you need it. </li> <li>If you find yourself without anyone who can help you, here are a couple options:<ol> <li>Look it up</li> <li>Ask Claude or ChatGPT. Be careful not to use a prompt that will cause it to give too much away --- if it tells you all the answers, it will be harder to learn. And I can't guarantee that it will always give you great answers. But LLMs are good resources to have when you don't have anything else.</li> </ol> </li> </ol> </li> </ol>"},{"location":"projects/DifferentialDrive/","title":"Differential Drive","text":""},{"location":"projects/DifferentialDrive/#introduction","title":"Introduction","text":"<p>This project is going to cover how to make both a basic and an advanced differential drive.</p>"},{"location":"projects/DifferentialDrive/#prerequisites","title":"Prerequisites","text":"<ul> <li>Comfortable with all the goals and prerequisites of Java102.</li> <li>Comfortable with lambdas &amp; functional interfaces</li> <li>Familiarity with types of sensors</li> <li>WPILib installed</li> </ul>"},{"location":"projects/DifferentialDrive/#goals","title":"Goals","text":"<p>Some understanding of and familiarity with:</p> <ul> <li>Robot code</li> <li>Simulation</li> <li>Testing robot code</li> <li>Control theory</li> <li>Command-based programming</li> </ul> <p>Also, a working, simulated, tested differential drive!</p>"},{"location":"projects/DifferentialDrive/#what-is-a-differential-drive","title":"What is a differential drive?","text":"<p>A differential drive is a type of robot drivetrain where two separately-driven groups of wheels are used to move the robot. By varying the speed of each wheel, the robot can move forward, backward, or turn. This setup is widely used due to its simplicity and high degree of control over the robot\u2019s movement.</p> <p>To move the robot forward/backward, both wheels must move at the same speed in the same direction. To turn, the wheels must move at different speeds or in opposite directions.</p>"},{"location":"projects/DifferentialDrive/#creating-your-project-repo","title":"Creating your project repo","text":"<p>The first step will be to create a repository for this project. We'll be using this base template for this project (and all other robot code projects in SciGuides). Follow the instructions in the README to create a new repository based on the template. Give your repository a descriptive name such as \"Differential Drive Bot\".</p> <p>In the README of your new repository, link this guide.</p> <p>Make sure to clone the project on your computer inside of your code folder!</p>"},{"location":"projects/DifferentialDrive/#robot-code-structure","title":"Robot Code Structure","text":"<p>Robot code is structured using subsystems and commands within FRC's command-based framework. This architecture simplifies robot programming by breaking down complex tasks into smaller, manageable pieces. </p> <p>All of your Subsystem classes must extend <code>SubsystemBase</code>. (Commands extend <code>Command</code>, but you won't really be writing full Command classes).</p> <p>Running commands and enforcing the one-command-per-subsystem rule is managed by the <code>CommandScheduler</code>. Essentially, if you want to run a command, you tell the <code>CommandScheduler</code>, and then each time the code runs the <code>CommandScheduler</code> goes through all the <code>Commands</code> that it has been told to run, and runs them.</p> <p>Please read the following sheets before moving forward:</p> <ul> <li>Subsystems and Commands</li> <li>File Structure</li> </ul>"},{"location":"projects/DifferentialDrive/#understanding-the-hardware","title":"Understanding the hardware","text":"<p>In order to program a robot, you first need to understand the physical hardware that you are working with, and particularly the electrical components.</p> <p>For this guide, we\u2019ll be using CANSparkMax motor controllers paired with NEO motors.</p> <ul> <li>CANSparkMax: A motor controller developed by REV Robotics designed specifically for controlling brushless motors like the NEO.</li> <li>NEO Motor: A brushless motor designed by REV Robotics.</li> </ul> <p>Let's look at what a differential drivetrain might look like:</p> <p></p> <p>The black cylinders between the two center wheels are motors. As you can see, there there are two motors attached to each side of the drivetrain.</p> <p>These motors are also connected via wires to motor controllers, which are connected ultimately to a roboRIO (gray square thing on the top). The roboRIO is a piece of hardware which connects and interfaces with all of the sensors and actuators on the robot (sensors collect data, actuators move). We can control those sensors and actuators by running code on the RIO.</p> <ul> <li>Remember <code>Ports.java</code>? Well, in order to control our electronics and for the RIO to send them signals, we need to know what physical ports our components are connected to. That's what we mean when we say that this file stores the ports for our components.</li> </ul> <p>The RoboRIO is connected to a radio (the white rectangle to the right of the RIO), which is how we generally connect our computers to the RIO.</p>"},{"location":"projects/DifferentialDrive/#drive-folder","title":"Drive Folder","text":"<p>Our first step will be to create a drive folder for everything related to the Drive subsystem. It will include:</p> <ul> <li>a <code>Drive.java</code> subsystem that extends <code>SubsystemBase</code> and contains the logic to control the motors and the drivetrain.</li> <li><code>DriveConstants.java</code>, containing whatever constants we will need for our subsystem (i.e. the dimensions of the drivetrain).</li> </ul> <p>Once you do that, your files should look something like this:</p> <p></p>"},{"location":"projects/DifferentialDrive/#ports","title":"Ports","text":"<p>In our <code>Drive.java</code> class, we will make all of our 4 motors using <code>CANSparkMax</code> objects. When you create a <code>CANSparkMax</code> object, you give it a port and a motor type (don't worry about what the motor type means for now). With that port, it is able to interface with the motor connected to the port through the RIO.</p> <p>Before we create our motor objects, let's add our ports to <code>Ports.java</code>.</p> <p>Currently, the file should look like this:</p> <pre><code>package robot;\n\npublic final class Ports {\n  // TODO: Add and change all ports as needed.\n  public static final class OI {\n    public static final int OPERATOR = 0;\n    public static final int DRIVER = 1;\n  }\n}\n</code></pre> <p>We structure our ports by creating a new static class within the <code>Ports</code> class for each subsystem (or in the case of <code>OI</code>, that's for the Xbox controllers). So create a new class for <code>Drive</code> ports!</p> <pre><code>package robot;\n\npublic final class Ports {\n  // TODO: Add and change all ports as needed.\n  public static final class OI {\n    public static final int OPERATOR = 0;\n    public static final int DRIVER = 1;\n  }\n\n  public static final class Drive {\n    public static final int RIGHT_LEADER = 2;\n    public static final int RIGHT_FOLLOWER = 3;\n    // etc\n  }\n}\n</code></pre> <p>As we said earlier, there will be four motors total, two on the right and two on the left. We're going to call one on each side the leader, and one the follower. </p> <p>In the example code I added ports for the motors on the right. Make sure you add for the ones on the left as well! You can assign any values that you want, as long as they are all different (and if you ever want to test this on a real drive train, you'll need to make sure the ports are accurate).</p>"},{"location":"projects/DifferentialDrive/#drive-subsystem","title":"Drive Subsystem","text":"<p>Now let's go back to <code>Drive.java</code> and write our subsystem!</p>"},{"location":"projects/DifferentialDrive/#motor-instantiation","title":"Motor instantiation","text":"<p>First off, we have to actually make our motor objects. We'll use the ports form <code>Ports.java</code>, and the motor type for all of our motors will be <code>MotorType.kBrushless</code>.</p> <p>To do this, you will first need to import <code>MotorType</code>, <code>Ports</code>, and <code>CanSparkMax</code>. You will also have to import <code>SubsystemBase</code> so that you can make <code>Drive</code> into a Subsystem:</p> <pre><code>package robot.drive;\n\nimport com.revrobotics.CANSparkMax;\nimport com.revrobotics.CANSparkLowLevel.MotorType;\n\nimport edu.wpi.first.wpilibj2.command.SubsystemBase;\nimport robot.Ports;\n\npublic class Drive extends SubsystemBase {\n\n}\n</code></pre> <p>We gave you all the imports for this, but in the future, a trick you can use is to start writing the thing you need to import and then press tab. So, in this case, if you were to start writing <code>Drive extends SubsystemBase</code>, but didn't finish the last word, <code>SubsystemBase</code> would come up as a suggestion:  If you then press tab, it will finish the word for you and actually import SubsystemBase!</p> <p>Okay, now we're ready to make our motors:</p> <pre><code>public class Drive extends SubsystemBase {  \n  private final CANSparkMax leftLeader = new CANSparkMax(Ports.Drive.LEFT_LEADER, MotorType.kBrushless);\n}\n</code></pre> <p>Below the instantiation of <code>leftLeader</code>, make variables for all the other motors! (<code>leftFollower</code>, <code>rightLeader</code>, and <code>rightFollower</code>).</p>"},{"location":"projects/DifferentialDrive/#motor-configuration","title":"Motor configuration","text":"<p>For our motors to work the way we want them to, we'll need to configure some specific settings. This will happen inside of our constructor, and we will be using various methods of the <code>CANSparkMax</code> class.</p> <p>The first thing that we'll do is reset all our sparks to a default state, clearing any old configurations that they may have had:</p> <pre><code>  public Drive() {\n    for (CANSparkMax spark : List.of(leftLeader, leftFollower, rightLeader, rightFollower)) {\n        spark.restoreFactoryDefaults();\n    }\n  }\n</code></pre> <p>Note: you'll need to import List for this</p> <p>Next, we're going to set something called the idle mode of our motors, which essentially determines the behavior of the motor when it's not being told to do anything. The options are:</p> <ul> <li><code>kBrake</code>: stop as fast as possible</li> <li><code>kCoast</code>: don't provide any voltage and just let it spin freely</li> </ul> <p>For a drivetrain, we don't want our robot to just keep drifting when we stop driving, so we want all our motors on brake mode (make sure you import <code>CANSparkBase.IdleMode</code>):</p> <pre><code>  public Drive() {\n    for (CANSparkMax spark : List.of(leftLeader, leftFollower, rightLeader, rightFollower)) {\n        spark.restoreFactoryDefaults();\n        spark.setIdleMode(IdleMode.kBrake);\n    }\n  }\n</code></pre> <p>For the next part, we're going to need to understand why we're calling our motors leaders and followers. If you think about it, for a differential drive to work all of the wheels on one side need to be moving at the same speed. The point of having two motors isn't actually to control two wheels separately. Instead, it's to have enough power to control two wheels together.</p> <p>So that means that we always want the two motors on the right and the two motors on the left to be moving the same way. We accomplish this by telling one motor on each side (the follower) to follow the other one (the leader). That way we only have to control the two leaders, and the followers will just copy them. We can do this using the <code>follow</code> method that of the <code>CANSparkMax</code> class.</p> <pre><code>  public Drive() {\n      for (CANSparkMax spark : List.of(leftLeader, leftFollower, rightLeader, rightFollower)) {\n        spark.restoreFactoryDefaults();\n        spark.setIdleMode(IdleMode.kBrake);\n    }\n\n    rightFollower.follow(rightLeader);\n    leftFollower.follow(leftLeader);\n  }\n</code></pre> <p>Now, for our last setting, take a look back at the image of the drivetrain where you can see all of the electronics. Notice how the motors on the left are facing left, and the motors on the right are facing right.</p> <p>By default, applying a positive voltage to the motors will make them go counterclockwise. So let's say that we want the robot to move straight, and so we apply the same positive voltage to both sides, and all of the motors move counterclockwise. Try to visualize what would happen.</p> <p>Because the wheels are facing opposite directions, clockwise doesn't mean the same thing for the two sides. The left wheels will end up going backwards, and the right ones will go forwards, and instead of going straight, the whole drivetrain will rotate counterclockwise.</p> <p>That's pretty confusing. Ideally, we'd like positive to mean forward for both sides. So in the code, we invert the left side. This means that it will negate every value we give it, so if we give it a positive voltage it will actually rotate counterclockwise. We do this using the <code>setInverted</code> method.</p> <pre><code>  public Drive() {\n      for (CANSparkMax spark : List.of(leftLeader, leftFollower, rightLeader, rightFollower)) {\n        spark.restoreFactoryDefaults();\n        spark.setIdleMode(IdleMode.kBrake);\n    }\n\n    rightFollower.follow(rightLeader);\n    leftFollower.follow(leftLeader);\n\n    leftLeader.setInverted(true);\n  }\n</code></pre>"},{"location":"projects/DifferentialDrive/#drive-method","title":"Drive method","text":"<p>Now that our motors are configured, we can actually make a drive method that will allow the motors to run! This method will take in a <code>leftSpeed</code> and a <code>rightSpeed</code> which we will pass to our motors.</p> <p>Side note: calling these values speed is actually a misnomer, since they specify both speed and direction, but using the terms interchangeably is pretty standard practice in this context.</p> <p>We will be using the <code>set</code> method of the <code>CANSparkMax</code> class, which takes a number between -1 and 1, where 1 is full speed forwards, 0 is no speed, and -1 is full speed backwards. So we're actually giving percentages of our max speed, not the speed itself.</p> <pre><code>  private void drive(double leftSpeed, double rightSpeed) {\n    leftLeader.set(leftSpeed);\n    rightLeader.set(rightSpeed);\n  }\n</code></pre>"},{"location":"projects/DifferentialDrive/#drive-command-factory","title":"Drive Command Factory","text":"<p>You might notice that the <code>drive</code> method above is private. But that means that we can't actually tell our robot to drive from <code>Robot.java</code>! So, why isn't it public? Well, when we tell subsystems to move, we generally always want that to be done through a <code>Command</code>, that way we can enforce the one-command-per-subsystem rule. So we actually don't want anybody outside of <code>Drive</code> to be directly calling this <code>drive</code> method.</p> <p>Instead, we're going to write a command factory, which is just a fancy way of saying a method that returns a command. What specifically do we want our command to do? Well, our primary method of driving will be using inputs from a controller. We have an Xbox controller in <code>Robot.java</code> called <code>driver</code>, and the <code>leftSpeed</code> and <code>rightSpeed</code> values are actually going to be the y values of the left and right joysticks on that controller.</p> <p>So our <code>drive</code> method should return a <code>Command</code> that drives the robot based on inputs from a controller. Since the controller is in <code>Robot.java</code>, not <code>Drive</code> (it is not part of the Drive subsystem), our method will need to take as inputs some way of retrieving the values from the controller.</p> <p>Specifically, we're going to take two <code>DoubleSuppliers</code>, one for the left velocity and one for the right velocity. In <code>Robot.java</code>, we'll call our method and give it methods to get the left and right y values on the Xbox controller. So, here's our method header:</p> <pre><code>public Command drive(DoubleSupplier vLeft, DoubleSupplier vRight);\n</code></pre> <p>Note: the two <code>drive</code> methods have the same name, but are not the same method. As long as the types of the parameters are different, you can have multiple methods with the same name.</p> <p>Next up, let's decide what type of Command we want to use. This isn't just something we want to do once - we need to get new inputs from the controller each tick - so we'll use a run command. We've talked about <code>Commands.run</code>, but in a Subsystem there's actually another method just called <code>run</code>, which calls <code>Commands.run</code> but uses that subsystem as the requirement. So <code>drive.run(action)</code> is the same as <code>Commands.run(action, drive)</code>. That's the method we're going to use for this, since we want to create a <code>RunCommand</code> that requires a drive subsystem.</p> <p>And the action is just going to be calling the other <code>drive</code> method using <code>vLeft</code> and <code>vRight</code>!</p> <pre><code>  public Command drive(DoubleSupplier vLeft, DoubleSupplier vRight) {\n    return run(() -&gt; drive(vLeft.getAsDouble(), vRight.getAsDouble()));\n  }\n</code></pre>"},{"location":"projects/DifferentialDrive/#driving-with-the-controller","title":"Driving with the controller","text":"<p>Now we're going to go to <code>Robot.java</code> and write the code to actually drive the robot using the driver controller!</p> <p>There should already be two <code>CommandXboxController</code> objects called <code>operator</code> and <code>driver</code> defined at the top of the class. You can ignore the <code>operator</code> controller, and we'll use the <code>driver</code> one for driving.</p> <p>Next up, we need to actually create our instance of the drive subsystem! You can do this right under the comment that says <code>// SUBSYSTEMS</code>:</p> <pre><code>  Drive drive = new Drive();\n</code></pre> <p>Now that we have our drivetrain initialized, we can set up driving with controllers. We're going to do that by setting a default command for drive. A default command is a command that runs on a subsystem whenever no other commands that require that subsystem are running. For drive, if we're not telling it to do something else, we always want it to be listening to the controller and driving.</p> <p>We set a subsystem's default command using <code>subsystem.setDefaultCommand(command)</code>. And we do those configurations in the <code>configureBindings</code> method inside of <code>Robot</code>. This method (along with <code>configureGameBehavior</code>) is called by <code>Robot</code>'s constructor, and are used to configure settings that need to be configured right when the robot is started up.</p> <pre><code>  private void configureBindings() {\n    drive.setDefaultCommand(drive.drive(driver::getLeftY, driver::getRightY));\n}\n</code></pre> <p>Now, if you had a real robot to test on, it would drive!! But knowing that would probably be more exciting if you could see and drive around some sort of simulation. Unfortunately, we can't do that yet because to simulate the movement of the robot, we would need an estimate for where the robot is on the field, which we don't have yet. So let's work on getting that.</p>"},{"location":"projects/DifferentialDrive/#odometry","title":"Odometry","text":"<p>Odometry is the process of using data from sensors to estimate your position and how it changes. In this case, the sensors that we'll be relying on are encoders (for our wheels) to and a gyroscope.</p> <p>Brush up on the sensors guide if you're uncertain what encoders and gyros are.</p>"},{"location":"projects/DifferentialDrive/#adding-encoders","title":"Adding encoders","text":"<p>Our first step is to add encoders to our <code>Drive</code> subsystem. We'll be using the relative encoders that are built-in to our sparks. We can get them using the <code>getEncoder</code> method of <code>CANSparkMax</code>.</p> <p>You can add the encoders right under where the sparks themselves are declared. Note that we only need the encoders of the leaders, because the followers should be doing the same thing as the leaders!</p> <pre><code>  private final RelativeEncoder leftEncoder = leftLeader.getEncoder();\n  private final RelativeEncoder rightEncoder = rightLeader.getEncoder();\n</code></pre>"},{"location":"projects/DifferentialDrive/#conversion-factors","title":"Conversion factors","text":"<p>By default, the encoders measure rotations of the motors. But we want to measure distance traveled. There are a couple of conversions that we need to make to do that:</p> <ol> <li>From rotations of the motor to rotations of the wheel<ul> <li>This is dependent on the gears that connect the motor to the wheel.</li> </ul> </li> <li>From rotations of the wheel to distance traveled<ul> <li>This is dependent on the radius of the wheels. One rotation of the wheel translates to traveling one circumference of the wheel.</li> </ul> </li> </ol> <p>So to convert between encoder readings, we need to know the gearing (wheel rotations per motor rotation) and circumference of the wheels. We can put these values in the <code>DriveConstants.java</code> file. We'll choose some arbitrary values, but if you're testing on a real robot make sure these values are accurate.</p> <pre><code>package robot.drive;\n\npublic class DriveConstants {\n  public static final double WHEEL_RADIUS = 0.08; //Meters\n  public static final double CIRCUMFERENCE = 2.0 * Math.PI * WHEEL_RADIUS;\n  public static final double GEARING = 8.0;\n}\n</code></pre> <p>Then, from these values we can calculate our conversion factor for position. This is the number that we multiply the encoder rotations by to get distance traveled. We need to multiply by gearing to convert to wheel rotations, and then by circumference to convert to distance.</p> <pre><code>  public static final double POSITION_FACTOR = CIRCUMFERENCE * GEARING;\n</code></pre> <p>We also need to calculate a separate conversion factor for velocity. The encoder by default gives you velocity in rotations per minute. We want it in meters per second. We can use the <code>POSITION_FACTOR</code> to convert to meters, and divide by 60 to convert from minutes to seconds.</p> <pre><code>  public static final double VELOCITY_FACTOR = POSITION_FACTOR / 60.0;\n</code></pre> <p>Now we just need to use the conversion method from the encoder class inside the constructor of <code>Drive.java</code>.</p> <pre><code>    leftEncoder.setPositionConversionFactor(DriveConstants.POSITION_FACTOR);\n    rightEncoder.setPositionConversionFactor(DriveConstants.POSITION_FACTOR);\n\n    leftEncoder.setVelocityConversionFactor(DriveConstants.VELOCITY_FACTOR);\n    rightEncoder.setVelocityConversionFactor(DriveConstants.VELOCITY_FACTOR);\n</code></pre>"},{"location":"projects/DifferentialDrive/#resetting-the-encoders","title":"Resetting the Encoders","text":"<p>At the start of the match (or any time you need to reset the robot's position), it's important to reset the encoder values to zero. This ensures that your distance calculations start from a known point.</p> <p>We'll reset the encoders during the subsystem initialization (in the constructor):</p> <pre><code>    leftEncoder.setPosition(0);\n    rightEncoder.setPosition(0);\n</code></pre>"},{"location":"projects/DifferentialDrive/#adding-a-gyroscope","title":"Adding a gyroscope","text":"<p>We're going to use the <code>AnalogGyro</code> class. We need to give the port of the gyro to the constructor, so we need to add that port in <code>Ports.java</code>.  Call the constant <code>GYRO_CHANNEl</code> and give it the value 1.</p> <p>Let\u2019s add the AnalogGyro to the top of the existing <code>Drive.java</code> file (under the encoders):</p> <pre><code>  private final AnalogGyro gyro = new AnalogGyro(Ports.Drive.GYRO_CHANNEL);\n</code></pre>"},{"location":"projects/DifferentialDrive/#resetting-the-gyro","title":"Resetting the Gyro","text":"<p>At the start of the match, it's important to reset the gyro so that your heading starts at 0. We'll do that in the constructor of <code>Drive.java</code>.</p> <pre><code>  gyro.reset();\n</code></pre> <p>You should reset the gyroscope anytime you need to ensure accurate heading data. Sudden robot movements, collisions, or physical rotation of the surface it is on can cause drift or skips over time, resulting in an incorrectly measured angle over the course of a match. Resets can correct for this.</p>"},{"location":"projects/DifferentialDrive/#adding-odometry","title":"Adding Odometry","text":"<p>Using the encoders and gyro we just made, we can start actually estimating our position. We do this using a WPILib class called DifferentialDriveOdometry, which helps estimate the position and angle on the field of a differential drive bot, using encoder and gyro values. Let's start by declaring a <code>DifferentialDriveOdometry</code> object at the top of our <code>Drive</code> subsystem.</p> <pre><code>  private final DifferentialDriveOdometry odometry;\n</code></pre>"},{"location":"projects/DifferentialDrive/#initializing-odometry","title":"Initializing Odometry","text":"<p>We declared our odometry already, but we still need to initialize it. Odometry needs an initial orientation for the robot, so we're just going to assume that it starts at the origin with a heading of 0.</p> <p>Read this for a brief explanation of <code>Rotation2d</code>, <code>Translation2d</code>, and <code>Pose2d</code>.</p> <p>Here\u2019s how we initialize the odometry in the constructor:</p> <pre><code>    odometry = new DifferentialDriveOdometry(\n            new Rotation2d(), \n            0, \n            0, \n            new Pose2d());\n</code></pre> <p><code>new Pose2d()</code> just creates a <code>Pose2d</code> where all angles and coordinates as 0.</p>"},{"location":"projects/DifferentialDrive/#updating-odometry","title":"Updating odometry","text":"<p>To keep track of the robot\u2019s position in real-time, we need to update the odometry regularly with the latest encoder readings.</p> <p>Here's how you might update odometry:</p> <pre><code>  private void updateOdometry(Rotation2d rotation) {\n    odometry.update(rotation, leftEncoder.getPosition(), rightEncoder.getPosition());\n  }\n</code></pre> <p>Note: We are passing in rotation as a parameter because once we want to simulate our robot, it'll be easier to distinguish between our real and sim rotation.</p> <p>Aside from updating our odometry, we might need to reset it. I will leave this up to you to figure out how to do. (Hint: <code>odometry</code> has a method called <code>resetOdometry</code>). We won't need it for this project but if you're using the drive for autos example, it is important to reset your odometry whenever autos start.</p> <p>To ensure that our odometry is constantly updating as the robot moves, we run the <code>updateOdometry()</code> method periodically every tick (0.02 seconds by default). This will go in the <code>periodic()</code> method which all subsystems inherit from <code>SubsystemBase</code>, and is called every tick.</p> <pre><code>  @Override \n  public void periodic() {\n    updateOdometry(gyro.getRotation2d());\n  }\n</code></pre> <p>Keep in mind, this will be changed in the simulation section to account for sim rotation.</p>"},{"location":"projects/DifferentialDrive/#getting-pose","title":"Getting pose","text":"<p>The last thing to finish up our basic drive will be to get our pose based on the odometry. We can do this by using the <code>getPoseMeters</code> method from <code>odometry</code>. Keep in mind this returns a Pose2d. We want the robot's pose to be easily accessible by other classes, so we'll create a public method in <code>Drive</code> that returns the pose.</p> <pre><code>  public Pose2d pose() {\n    return odometry.getPoseMeters();\n  }\n</code></pre>"},{"location":"projects/DifferentialDrive/#control-theory","title":"Control Theory","text":"<p>Before we get started, please make sure you have read the Control Theory reference sheet as we are going to assume you are aware of what PID and Feedforward generally do.</p> <p>In this section, we're going to create PID and feedforward controllers to convert from desired speeds to voltages.</p>"},{"location":"projects/DifferentialDrive/#why-we-use-controllers","title":"Why We Use Controllers","text":"<p>Before we dive into the code, let\u2019s touch on why creating control systems are important for driving a robot. Ultimately, the motors run because they are given some voltage. Right now, we're driving using the <code>motor.set</code> method, which takes a speed. The CANSparkMax motor controllers have their own control systems that generate voltages based on speeds. But those systems aren't tuned to your robot. They work pretty well when you just have a free-spinning motor, but your motors are on robots. They're in gear boxes and are weighed down. So if you actually want to accurately reach your target speeds, you need to have control systems that are tuned to your system.</p> <p>In this case, we're going to do that by making our own PID and feedforward controllers which we'll use to convert velocities to voltages, and then just feeding those voltages into our motors.</p>"},{"location":"projects/DifferentialDrive/#feedforward","title":"Feedforward","text":"<p>First off, we're going to create a feedforward model, which will use an ideal model of our system to tell us what voltages we should use. Its output will be our prediction of what voltage is required to maintain the velocity that we're trying to reach. This will be entirely based on our desired velocity, and will not take into account our current velocity at all. It factors in predictable challenges like friction, but not unexpected factors like slipping on the carpet.</p> <p>Here's how we can create a feedforward controller:</p> <pre><code>  private final SimpleMotorFeedforward feedforward = new SimpleMotorFeedforward(FF.kS, FF.kV);\n</code></pre> <ul> <li>kS and kV are constants that become coefficients in an equation to convert from desired velocity to voltage<ul> <li>The kS term in the equation accounts for constant voltage to overcome friction</li> <li>The kV term accounts for the voltage to maintain a certain velocity</li> </ul> </li> <li>These FF constants are stored in <code>DriveConstants.java</code> and are imported. Keep in mind these are just random values to get you started with the project. With a real robot, it will be important to tune your values to work for your system.</li> </ul> <pre><code>  public static final class FF {\n    public static final double kS = 1;\n    public static final double kV = 3;\n  }\n</code></pre>"},{"location":"projects/DifferentialDrive/#pid","title":"PID","text":"<p>Next we can add a PID controllers. The feedforward model is pretty good, but it's not at all perfect. It also doesn't account for external forces that might get in the way of our movement. So we'll make PID controllers, which will actually take into account error (how far we are from the desired velocity). That way we can react when we aren't reaching our setpoints. Essentially, we're building on a pretty good estimate to account for its flaws.</p> <p>With the feedforward controller we only made one. That's because all the FF controller needs is a velocity, and it will always return the same voltage when given the same velocity. So we can just use it twice, one for each side.</p> <p>PID controllers on the other hand, don't just take into account your current speed and your current setpoint --- it also stores and uses your previous velocities. And our left and right motors have different velocities, so we need two controllers. One will be for the left wheels, and will store past velocity values for the left side, and one will do the same for the right wheels.</p> <pre><code>  private final PIDController leftPIDController =\n      new PIDController(PID.kP, PID.kI, PID.kD);\n  private final PIDController rightPIDController =\n      new PIDController(PID.kP, PID.kI, PID.kD);\n</code></pre> <p>As you can see, we used three constants for this controller: kP, kI, and kD. We'll define them in DriveConstants.java.</p> <pre><code>  public static final class PID {\n    public static final double kP = 8.5;\n    public static final double kI = 0.0;\n    public static final double kD = 0.0;\n  }\n</code></pre>"},{"location":"projects/DifferentialDrive/#combining-ff-and-pid","title":"Combining FF and PID","text":"<p>Now, let\u2019s see how we can use these two control mechanisms to actually drive our robot! We\u2019ll look at the <code>drive</code> method, which is responsible for controlling the motor voltages.</p> <p>Based on our desired speeds, we can get outputs from PID and FF. We can then add these together and get our final voltage that we're going to send to the motor. To find these outputs, we need to give the controllers our desired speeds. The <code>drive</code> method really takes a percentage of our maximum velocity, from -1 to 1, rather than the actual velocity. So to find our desired velocities we can multiply <code>leftSpeed</code> and <code>rightSpeed</code> by our maximum speed.</p> <p>We'll define our maximum speed in our <code>DriveConstants</code> class:</p> <pre><code>  public static final double MAX_SPEED = 2; // Meters per second\n</code></pre> <p>Using that, we can find the feedforward and PID outputs for each side:</p> <pre><code>  public void drive(double leftSpeed, double rightSpeed) {\n    final double realLeftSpeed = leftSpeed * DriveConstants.MAX_SPEED;\n    final double realRightSpeed = rightSpeed * DriveConstants.MAX_SPEED;\n\n    final double leftFeedforward = feedforward.calculate(realLeftSpeed);\n    final double rightFeedforward = feedforward.calculate(realRightSpeed);\n\n    final double leftPID = \n      leftPIDController.calculate(leftEncoder.getVelocity(), realLeftSpeed);\n    final double rightPID = \n      rightPIDController.calculate(rightEncoder.getVelocity(), realRightSpeed);\n  }\n</code></pre> <p>Finally, we combine the outputs and send them to the motors:</p> <pre><code>      double leftVoltage = leftPID + leftFeedforward;\n      double rightVoltage = rightPID + rightFeedforward;\n\n      leftLeader.setVoltage(leftVoltage);\n      rightLeader.setVoltage(rightVoltage);\n</code></pre>"},{"location":"projects/DifferentialDrive/#simulation-and-logging","title":"Simulation and Logging","text":"<p>Now we've reached the point where we can actually simulate our robot and drive it around! Please read the Simulation guide before continuing on with this.</p>"},{"location":"projects/DifferentialDrive/#setting-up-the-simulation","title":"Setting Up the Simulation","text":"<p>To simulate the drivetrain, we\u2019re going to use the <code>DifferentialDrivetrainSim</code> class. This simulation will model the physical characteristics of our robot\u2014like the motors, mass, and wheel dimensions\u2014so we can see how the code will affect the robot in a virtual environment.</p> <p>Here\u2019s how we set it up in our <code>Drive.java</code> constructor:</p> <pre><code>  private final DifferentialDrivetrainSim driveSim;\n  // ...\n  public Drive() {\n    // ...\n    driveSim =\n        new DifferentialDrivetrainSim(\n            DCMotor.getMiniCIM(2),\n            DriveConstants.GEARING,\n            DriveConstants.MOI,\n            DriveConstants.DRIVE_MASS,\n            DriveConstants.WHEEL_RADIUS,\n            DriveConstants.TRACK_WIDTH,\n            DriveConstants.STD_DEVS);\n    //...\n  }\n</code></pre> <p>Remember that all of these values would be stored in <code>DriveConstants.java</code>:</p> <pre><code>  public static final double TRACK_WIDTH = 0.7112; // Meters\n  public static final double WHEEL_RADIUS = 0.08; //Meters\n  public static final double GEARING = 8.0;\n  public static final double MOI = 7.5;\n  public static final double DRIVE_MASS = 60.0; //kg\n  public static final Matrix&lt;N7, N1&gt; STD_DEVS = VecBuilder.fill(0, 0, 0, 0, 0, 0, 0);\n</code></pre> <p>By setting up the simulation with these constants, we\u2019re creating a physics model of our robot that behaves similarly to how it would in real life.</p> <p>Before we start periodically updating our sim values, make sure to set the voltage to our sim drive in the <code>drive</code> method (the one that returns void):</p> <pre><code>    driveSim.setInputs(leftVoltage, rightVoltage);\n</code></pre> <p>Next, we need to update our odometry using our simulated heading in simulation:</p> <pre><code>  public void periodic() {\n    updateOdometry(Robot.isReal() ? gyro.getRotation2d() :  \n                                    driveSim.getHeading());\n  }\n</code></pre> <ul> <li><code>Robot.isReal()</code> returns whether or not we are connected to a real robot</li> <li>What are the <code>?</code> and <code>:</code> symbols? That whole statement is a ternary operator.</li> </ul>"},{"location":"projects/DifferentialDrive/#simulation-periodic","title":"Simulation periodic","text":"<p>The <code>simulationPeriodic</code> method is where we update the simulation. This method is called every tick (0.2 seconds) when the robot is simulated so that we can keep the simulated sensors and drivetrain in sync with the rest of the code. The <code>@Override</code> annotation above the method is there so that the compiler knows it's the inherited method from <code>SubsystemBase</code>, but it isn't necessary to include.</p> <pre><code>  @Override\n  public void simulationPeriodic() {\n    // sim.update() tells the simulation how much time has passed\n    driveSim.update(Constants.PERIOD.in(Seconds));\n    leftEncoder.setPosition(driveSim.getLeftPositionMeters());\n    rightEncoder.setPosition(driveSim.getRightPositionMeters());\n  }\n</code></pre> <ul> <li><code>leftEncoder.setPosition</code> and <code>rightEncoder.setPosition</code> update the simulated encoder positions to match the simulated robot\u2019s movement.</li> </ul> <p>This method ensures that our simulated sensors provide accurate feedback as the robot \"moves\" in the simulation, allowing us to test and tweak our code.</p>"},{"location":"projects/DifferentialDrive/#logging-capturing-important-data","title":"Logging: Capturing Important Data","text":"<p>Now let\u2019s talk about logging. Logging, or telemetry, is a way of recording information in real time. That information might include data from sensors, estimated positions, what command is running, etc. Logging is crucial for understanding how our robot behaves over time, diagnosing issues, and improving performance. Read the Telemetry doc to learn more about logging and how we do it!</p> <p>We\u2019re going to use a tool called Monologue for logging, which gives us a structured way to record and analyze data from the robot\u2019s systems. This should already be set up in the <code>configureGameBehavior</code> method in <code>Robot.java</code>. You should see the following lines:</p> <pre><code>    Monologue.setupMonologue(this, \"/Robot\", false, true);\n    addPeriodic(Monologue::updateAll, kDefaultPeriod);\n    addPeriodic(FaultLogger::update, 1);\n</code></pre> <p>This initializes Monologue with our robot, setting up the logging system to capture data as the robot runs and makes sure Monologue logs data at regular intervals, which we\u2019ve defined with kDefaultPeriod. By logging data regularly, we can view information in real time and later review how the robot performed and make informed adjustments to our code.</p>"},{"location":"projects/DifferentialDrive/#using-monologue-for-networktables-logging","title":"Using Monologue for NetworkTables Logging","text":"<p>We use NetworkTables (NT) to make logging specific variables or objects easier. You should log any values that might be useful for debugging, or that will help you understand what is happening with the robot in general. So that includes commands, joystick inputs, voltages, positions, etc..</p> <p>We use the <code>@Log.NT</code> annotation to indicate what values we want to be logged, and Monologue will periodically capture and record those values, which we can view in realtime or afterwords on dashboards like Shuffleboard or SmartDashboard.</p> <p>Let's get started by making a Field2d object (discussed in the Simulation reference sheet):</p> <pre><code>  @Log.NT \n  private final Field2d field2d = new Field2d();\n</code></pre>"},{"location":"projects/DifferentialDrive/#updating-the-robot-periodic","title":"Updating the Robot: periodic","text":"<p>The field2d will show us a field, but we want to actually see our robot moving on the field, so we need to periodically update the Field2d object with the position of our robot. We'll do that in the <code>periodic</code> method because we want our position to be updated regularly, and whether or not our robot is simulated.</p> <pre><code>    field2d.setRobotPose(pose());\n</code></pre>"},{"location":"projects/DifferentialDrive/#seeing-the-result","title":"Seeing the result","text":"<p>Start by launching sim and opening up NetworkTables. Use the sim gui guide to help you navigate around. </p> <p>To see our <code>Field2d</code> widget, go to NetworkTables, then SmartDashboard, and click \"field\". </p> <p>Next, to see our logged data, click NetworkTables and the first option. You should see something similar to the image below.</p> <p></p> <p>Since our driver port is 1, make sure your joystick is also on the same port value in sim or else it will not get any inputs. </p> <p>Lastly, to control the differential drive properly, the joystick will require to have 6 total <code>axis</code> as shown below. You can add more and change the bindings by going to <code>DS</code> then clicking on the settings of which ever keyboard you are using.</p> <p></p>"},{"location":"projects/DifferentialDrive/#unit-testing-system-checks","title":"Unit Testing &amp; System Checks","text":"<p>Coming soon!</p>"},{"location":"projects/intro-to-programming/","title":"About","text":"<p>This is the intro to programming series!</p> <p>Follow the guides in this series in this order:</p> <ol> <li>Programming 101</li> <li>Java 101</li> <li>Java 102</li> </ol> <p>Feel free to skip whatever you already are comfortable with.</p>"},{"location":"projects/intro-to-programming/Java101/","title":"Java 101","text":""},{"location":"projects/intro-to-programming/Java101/#introduction","title":"Introduction","text":""},{"location":"projects/intro-to-programming/Java101/#prerequisites","title":"Prerequisites","text":"<ul> <li>Comfortable with all of the goals for Programming101.</li> <li>Comfortable with command-line navigation</li> <li>Comfortable with git (ignore this one for now!)</li> <li>Environment set up<ul> <li>Code directory created</li> <li>VSCode installed</li> <li>Git &amp; Github set up</li> </ul> </li> </ul>"},{"location":"projects/intro-to-programming/Java101/#goals","title":"Goals","text":"<p>Familiarity with the following topics:</p> <ul> <li>Java file structure and syntax</li> <li>Printing</li> <li>Types</li> <li>Operations, if statements, variables, loops, functions, and arrays in Java<ul> <li>Multi-dimensional arrays</li> </ul> </li> </ul>"},{"location":"projects/intro-to-programming/Java101/#best-practices","title":"Best Practices","text":"<p>As always, follow the general best practices.</p> <p>For this guide, you should be following along on your own computer. When there are pieces of example code, first think about out how the code works, and then try running it yourself. After each section, try to play around with the concepts you've learned! Make your own examples similar to the ones given.</p> <p>There will be some practice problems, but not as consistently, so it's really important that you actually are following along, experimenting on your own, and just making sure you really understand what's happening.</p> <p>And if you need help, ask!</p>"},{"location":"projects/intro-to-programming/Java101/#setup","title":"Setup","text":""},{"location":"projects/intro-to-programming/Java101/#create-github-repo","title":"Create GitHub Repo","text":"<p>A GitHub repository, often referred to as a \"repo,\" is a central location where you can store, manage, track, and control changes to your project files. It's like a folder for your project that is hosted on GitHub's servers. It also allows you to easily share your code, or collaborate with others.</p> <p>You're going to create a repo for the code that you write in this tutorial.</p> <ol> <li>Open GitHub and log in.</li> <li>Create a new repository<ul> <li>Click the '+' icon in the top-right corner of the page.</li> <li>Select \"New repository\" from the dropdown menu.</li> </ul> </li> <li>Set up your repository<ul> <li>Choose a name for your repository (e.g., \"Learning Java\").</li> <li>Add a brief description (optional).</li> <li>Choose \"Public\" or \"Private\" for your repository visibility (if you choose Private, no one will be able to see it unless you explicitly add them).<ul> <li>You can always change this later</li> </ul> </li> <li>Check the box to \"Initialize this repository with a README\".</li> <li>Press the \".gitignore template\" dropdown under \"Add .gitignore\" and choose \"Java\"</li> <li>Click \"Create repository\"</li> </ul> </li> <li>Clone the repository on your local machine<ul> <li>On your new repository's page, click the green \"Code\" button.</li> <li>Copy the HTTPS URL provided.</li> <li>Open Terminal for Mac/Linux, or PowerShell for Windows</li> <li>Navigate to the directory where you want to store your project, and clone the repository:</li> </ul> </li> </ol> <pre><code>cd path/to/your/code/folder\ngit clone HTTPS-LINK\n</code></pre> <p>Replace <code>path/to/your/code/folder</code> with the path to the directory you created for your code, and replace <code>HTTPS-LINK</code> with the URL you copied. 5. Verify the clone     - Look at the contents of your code directory in Command Line and check that the new repository is there:</p> <pre><code>ls\n</code></pre>"},{"location":"projects/intro-to-programming/Java101/#open-repo-in-vscode","title":"Open Repo in VSCode","text":"<ol> <li>Open VSCode<ul> <li>If you installed regular, non-WPILib VSCode, open that</li> </ul> </li> <li>Open the repository folder<ul> <li>In VSCode, go to File &gt; Open Folder (or use the keyboard shortcut: Ctrl+K Ctrl+O on Windows/Linux, Cmd+O on Mac).</li> <li>Navigate to the directory where you cloned your repository.</li> <li>Select the repository folder and click \"Select Folder\" (or \"Open\" on Mac).</li> </ul> </li> </ol> <p>In the left sidebar, you should see the file explorer with your repository's files (README.md and .gitignore).</p>"},{"location":"projects/intro-to-programming/Java101/#write-readme","title":"Write README","text":"<p>A README file is a text file that introduces and explains a project.</p> <p>Open your README.md file, and write a few words about what this project is. Some suggestions:</p> <ul> <li>Say that you're learning Java</li> <li>Link to the intro to programming readme<ul> <li>This README (like this guide) is written in Markdown, a simple language for formatting text. Here's how you embed a link in Markdown:</li> </ul> </li> </ul> <pre><code>[text](link)\n</code></pre>"},{"location":"projects/intro-to-programming/Java101/#create-java101-directory","title":"Create java101 Directory","text":"<p>You will be using this repository for the remainder of the intro to programming series, so it will be helpful to have separate directories for each part. Make a new directory called <code>java101</code>. We will be working in that directory.</p> <p>Note: depending on how your Java project is configured, you may need to add <code>package java101;</code> to the top of each Java file you make in the <code>java101</code> directory.</p> <p>Inside of <code>java101</code>, make a new <code>README.md</code> file. In this README file, link this guide.</p> <p>Also in <code>java101</code>, make a file called <code>Main.java</code>.</p> <p>You have two options for how to make these files:</p> <ol> <li>Use the <code>touch</code> command<ol> <li>Open Terminal or PowerShell (or open the VSCode version using Control + ~)</li> <li>Navigate to <code>java101</code> (if you're using VSCode CommandLine, you should start whatever folder you have open in VSCode)</li> <li>Make a new file called <code>Main.java</code></li> </ol> </li> <li>Use the VSCode file explorer<ol> <li>Right click in the file explorer on the left</li> <li>Select \"New File\"</li> <li>Name your file \"Main.java\"</li> </ol> </li> </ol>"},{"location":"projects/intro-to-programming/Java101/#set-up-main-file","title":"Set Up Main File","text":"<p>It's time to set up your first Java file!</p> <p>Open <code>Main.java</code> in VSCode using the file explorer. Your file should either be empty or look something like this:</p> <pre><code>public class Main {\n\n}\n</code></pre> <p>If it's empty, copy the code in from here.</p> <p>Put your curser on the line in between the two curly braces. Write \"main\" and then hit tab. Your file should end up looking like this:</p> <pre><code>public class Main {\n    public static void main(String[] args) {\n\n    }\n}\n</code></pre> <p>Above the words <code>public static void</code> you should see a little <code>Run | Debug</code>. You should be able to press on either word.</p>"},{"location":"projects/intro-to-programming/Java101/#make-initial-commit","title":"Make Initial Commit","text":"<p>Now it's time to update your git repository with the changes you just made!</p> <p>First off, open Terminal or PowerShell (in VSCode if you'd prefer). Navigate to your project directory (if you're in <code>java101</code>, do <code>cd ..</code>).</p> <p>Then, type the following in:</p> <pre><code>git add .\ngit commit -m \"added readme and main file\"\ngit push\n</code></pre> <p>Okay, you're all set up!</p>"},{"location":"projects/intro-to-programming/Java101/#file-structure","title":"File Structure","text":"<p>At least at first, there are a lot of little things that you're going to be ignoring. I promise, we'll get to them later (mostly in Java102).</p> <p>Here's the list of things you don't need to understand as of right now:</p> <ul> <li>what <code>public</code> means</li> <li>what <code>class</code> means</li> <li>what <code>static</code> means</li> <li>what <code>String[] args</code> means</li> <li>what the <code>public class Main { }</code> block is doing</li> </ul> <p>Here's what you do need to know to get started:</p> <ul> <li>DO NOT DELETE ANYTHING that is currently there.<ul> <li>Do not delete any curly brackets. Do not delete <code>public class Main</code>. Leave it all.</li> </ul> </li> <li>All code that you write will be inside of the outer pair of curly braces (in the <code>public class Main { }</code> block).</li> <li>The line <code>public static void main(String[] args] {}</code> is defining a function. I'm not going to explain the syntax yet, all you need to know is this:<ul> <li>When you press <code>Run</code>, the code written inside of that <code>main</code> function, between the open and closed curly braces will run. No other code will run unless called in the <code>main</code> function (or in a variable definition).</li> </ul> </li> <li>Outside of the main function, you can create other functions and you can define variables (those are the only things you can do that are currently relevant).</li> <li>What you need to know about the order of definitions in your Java file:<ul> <li>Function definitions:<ul> <li>You can define functions in any order within the file.</li> <li>A function can be called from anywhere in the file, even if it's defined below.</li> </ul> </li> <li>Variable definitions (for variables defined outside of functions):<ul> <li>Variables can be used in any function, regardless of where the variable and function are defined in the file.</li> <li>When defining a variable <code>x</code>, you can only reference other variables inside the definition if they are defined above <code>x</code>.</li> </ul> </li> </ul> </li> </ul>"},{"location":"projects/intro-to-programming/Java101/#java-syntax","title":"Java Syntax","text":"<p>A few key things to remember about Java syntax and style:</p> <ul> <li>There must be a semicolon at the end of each complete statement (i.e. returning a value, mutating a variable, calling a function, etc.) or declaration (i.e. defining a variable or function).</li> <li>Java uses curly braces (<code>{}</code>) to denote code blocks (unlike python which uses colons).</li> <li>In Java, variable and function names are written in camelCase with the first letter lowercase.<ul> <li>File names are written with the first letter capitalized.</li> </ul> </li> </ul>"},{"location":"projects/intro-to-programming/Java101/#printing","title":"Printing","text":"<p>In Java, if you want to be able to see the result of a piece of code that you write, you need to print it. Whatever it is that you print will appear on the console as text.</p> <p>Note: printing is an example of a side effect</p> <p>If you try to print something that doesn't have an automatic conversion to text (i.e. an array), some combination of characters that represents that object but is illegible to you will appear. So be careful with what you print.</p> <p>You can print by using the function <code>System.out.println()</code>. (In VSCode, you can also just write <code>sysout</code> and hit tab, and the rest should autocomplete).</p> <p>So for instance, if you run this code:</p> <pre><code>public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}\n</code></pre> <p>This will appear on the console:</p> <pre><code>&gt;&gt; Hello World\n</code></pre> <p>Note, if you want to print raw text (like \"Hello World\"), you must put quotation marks around the text. When you do that, you mark the text as a String (the data type for raw text). If you do not put quotation marks, the computer will think that you are trying to refer to a symbol like a function or variable.</p>"},{"location":"projects/intro-to-programming/Java101/#operations","title":"Operations","text":"<p>Exactly the same as in Programming101!</p>"},{"location":"projects/intro-to-programming/Java101/#if-statements","title":"If Statements","text":"<p>Exactly the same as in Programming101!</p>"},{"location":"projects/intro-to-programming/Java101/#types","title":"Types","text":"<p>Java is what is called a statically typed language (often just called typed). This is one of the biggest differences between Java and languages like Python and Javascript, which are dynamically typed (often called untyped).</p> <p>This will impact your experience as a developer in two primary ways:</p> <ol> <li>You will need to explicitly state the data types of many values</li> <li>Your computer will catch more bugs and you will get more informative error messages!</li> </ol> <p>For right now, we're going to focus on the following data types:</p> <ul> <li>integers</li> <li>doubles</li> <li>booleans</li> </ul> <p>The key words in Java that allow us to identify something as being of these types are <code>int</code>, <code>double</code>, and <code>boolean</code>.</p> <p>So, when do we need to declare types? Essentially, types are required whenever you create something. So, when you make a new variable, you need to specify what type that variable is (even if the variable is created in the header of a for loop). And when you make a function, you must specify the return type (the type of the output) as well as the types of all inputs to the function.</p>"},{"location":"projects/intro-to-programming/Java101/#variables","title":"Variables","text":"<p>Here is the basic syntax for defining variables in Java:</p> <pre><code>type name = value;\n</code></pre> <p>So, for example, if you wanted to create an integer called x with the value 6, you would write:</p> <pre><code>int x = 6;\n</code></pre> <p>So what would you expect the following code to print? (First think it through on your own, and then you can run the code on your computer and check that the output is as you expected).</p> <pre><code>public class Main {\n    public static void main(String[] args) {\n        int x = 6;\n        System.out.println(x + 4);\n        System.out.println(x);\n        System.out.println(x % 2 == 0);\n    }\n}\n</code></pre> <p>For now, if you create a variable outside of a function, you need to put the word <code>static</code> before the type. I'm not going to explain what that means or why you need it yet, but we'll get there in Java102. Here's an example:</p> <pre><code>public class Main {\n    static int x = 6;\n\n    public static void main(String[] args) {\n        System.out.println(\"x: \" + x);\n        // reassigning the value of x to be the old x plus 4\n        x = x + 4;\n        System.out.println(\"new x: \" + x);\n    }\n}\n</code></pre>"},{"location":"projects/intro-to-programming/Java101/#arrays","title":"Arrays","text":"<p>One data type we did not talk about yet in this guide is an array. Unlike a boolean or integer or double, there are many different kinds of arrays. There can be an array of integers, of booleans, of doubles, etc. So if we were to declare the type of something as an array, that wouldn't really be enough information. Instead, the type of an array has to also include the type of the elements in the array.</p> <p>Here's how we do that by taking the type of the elements and adding <code>[]</code> to the end. So the type of an array of doubles would be: <code>double[]</code></p> <p>Next, let's go over how we actually create arrays. There are two methods we can use.</p> <p>The first is to explicitly initialize all the elements in the array. We do that using the following syntax:</p> <pre><code>{element1, element2, element3}\n</code></pre> <p>Here's an example of using this method to create a 4 element double array:</p> <pre><code>public class Main {\n    static double[] arr = {4.5, 6, 9.0, 8};\n\n    public static void main(String[] args) {\n        // to find the length of an array, use array.length\n        System.out.println(arr.length);\n    }\n}\n</code></pre> <p>The other option is to tell the computer to create an array with a specified number of elements. All elements will initially be the default value for that type. For ints and doubles, the default value is zero. For booleans the default is false. Then, if you want to change the values you can.</p> <p>You can do this with the following syntax:</p> <pre><code>new elementType[length]\n</code></pre> <p>The <code>new</code> keyword is what we use when we're telling the computer to create a new value of a certain type (there's more to this, but we'll get to that in Java102).</p> <p>Here's an example of using this method to initialize a 100 element boolean array:</p> <pre><code>public class Main {\n    static boolean[] arr = new boolean[100];\n\n    public static void main(String[] args) {\n        System.out.println(arr[0]);\n        // setting the 4th element in arr to true\n        arr[3] = true;\n        System.out.println(arr[0] || arr[3]);\n        System.out.println(arr.length);\n    }\n}\n</code></pre>"},{"location":"projects/intro-to-programming/Java101/#2d-arrays","title":"2D Arrays","text":"<p>Just as we can have an array if booleans or integers or doubles or Strings, we can also have an array of arrays. We call such an array a 2d array.</p> <p>So, let's say we want to represent a tic tac toe board. And let's say we've decided to represent blank, x ,and o with $0$, $1$, and $-1$ respectively. We could then represent each row as an integer array of length three. And to represent the entire board, we would use an array of three rows. So in the end, that's an array of length three, where each element is an integer array of length three.</p> <p>In other words, we can represent a tic tac toe board as a 2 dimensional integer array.</p> <p>We usually denote array types by taking the type of the element and adding <code>[]</code> to the end. That method works here as well.</p> <p>The values in the outer array are of type <code>int[]</code>. So the final type of the board is <code>int[][]</code>.</p> <p>And if we want to extract a value from the board, we can index the arrays just like we would a one dimensional array.</p> <pre><code>public class Main {\n    static int[][] board = new int[3][3];\n\n    public static void main(String[] args) {\n        // to start, let's extract the first row\n        // (aka the first element in the array)\n        int[] firstRow = board[0];\n        // now, we'll get the first value in that row\n        int firstVal = firstRow[0];\n        System.out.println(firstVal);\n    }\n}\n</code></pre> <p>We did that in two steps - one to get the row, one to get the value. But we can also consolidate that into one step:</p> <pre><code>public class Main {\n    static int[][] board = new int[3][3];\n\n    public static void main(String[] args) {\n        int firstVal = board[0][0];\n        System.out.println(firstVal);\n    }\n}\n</code></pre> <p>In general, we can index this board using <code>board[row][column]</code> where row and column are integers between $0$ and $3$ representing the row and column of the value we want to extract.</p> <p>Note: You can also have higher dimensional arrays (3D, 4D, 5D, etc).</p>"},{"location":"projects/intro-to-programming/Java101/#loops","title":"Loops","text":"<p>The syntax for while loops is the same as in Programming101:</p> <pre><code>while (condition) {\n    // code to run\n}\n</code></pre> <p>The syntax for for-each loops is very similar to Programming101:</p> <pre><code>for (type element : collection) {\n    // code to run for each element\n}\n</code></pre> <p>There are two differences:</p> <ol> <li>The type of <code>element</code> is declared. <code>element</code> is a variable that we are creating, so we must state its type.</li> <li>I used the word <code>collection</code> instead of <code>array</code>. This is because there are other types of collections that you can iterate through in Java. In this guide we'll really only use arrays, but if you're ever using an <code>ArrayList</code>, <code>Set</code>, <code>Map</code>,  or other similar object, you can iterate through those using for each loops as well.</li> </ol> <p>Here's a simple example of a for each loop in Java:</p> <pre><code>public class Main {\n    public static void main(String[] args) {\n        int[] fib = {1, 1, 2, 3, 5, 8, 13};\n        int sum = 0;\n        for (int e : fib) {\n            // add each element of fib to sum\n            sum = sum + e;\n        }\n        System.out.println(sum);\n    }\n}\n</code></pre>"},{"location":"projects/intro-to-programming/Java101/#for-loops","title":"For Loops","text":"<p>Java actually has a third kind of loop. It's called a for loop, but is more closely related to a while loop than a for each loop.</p> <p>Let's start with an example of when you might want to use a for loop:</p> <p>You want to create an array with 100 elements, where every element with an odd index has the value 1, and every element with an even index has the value 2. (Not that this particular scenario has any practical uses that I can think of).</p> <p>Here's how you might do that with a while loop:</p> <pre><code>public class Main {\n    public static void main(String[] args) {\n        int[] arr = new int[100];\n        int index = 0;\n        while (index &lt; 100) {\n            if (index % 2 == 0) {\n                arr[index] = 2;\n            } else {\n                arr[index] = 1;\n            }\n            index = index + 1;\n        }\n    }\n}\n</code></pre> <p>Alternatively:</p> <pre><code>public class Main {\n    public static void main(String[] args) {\n        int[] arr = new int[100];\n        int index = 0;\n        while (index &lt; 100) {\n            arr[index] = 2 - index % 2;\n            index = index + 1;\n        }\n    }\n}\n</code></pre> <p>Let's examine these code examples. In both implementations, there are three parts of the code that define how the iteration works. These lines are all we need to know how many times the loop will run, and what the values of the variables it uses will be each time. Here are the lines:</p> <pre><code>int index = 0;\n</code></pre> <pre><code>index &lt; 100\n</code></pre> <pre><code>index = index + 1;\n</code></pre> <p>The first line creates the variable that we use for our iteration. The second line tells us how we use that variable to decide when the loop ends. The third line tells us how we update the variable each time we run the loop.</p> <p>For loops are basically shorthand for this, allowing us to do all three of these things in the header of the loop. Here's the basic syntax:</p> <pre><code>for (define variable; condition; code to update variable) {\n    // code to run\n}\n</code></pre> <p>Here's how we'd do the same thing we just did with a while loop, but using a for loop:</p> <pre><code>public class Main {\n    public static void main(String[] args) {\n        int[] arr = new int[100];\n        for (int index = 0; index &lt; 100; index = index + 1) {\n            arr[index] = 2 - index % 2;\n        }\n    }\n}\n</code></pre> <p>In general, we use for loops when we want to iterate through a range of values in a predictable, consistent way. So, for instance, if we want to loop through all the indices of an array, or if we want to loop through the multiples of two below 1000.</p> <p>Sometimes, we just have a piece of code that we want to run the exact same way some number of times, and we can use for loops for that as well. For instance, let's say we want to have a 9 by 9 grid of dashes that we can print. </p> <p>For this example, we're going to be working with strings, which we haven't done much of thus far. The key word for the string type is <code>String</code> (note the capital first letter). We'll get to why this type is capitalized when others in Java102.</p> <p>Before we get to the implementation, we need to introduce a few new things:</p> <ul> <li>String addition<ul> <li>For strings, we use the <code>+</code> operator for concatenation (the process of joining strings)<ul> <li>Example: <code>\"hello \" + \"world\"</code> \u2192 <code>\"hello world\"</code></li> </ul> </li> <li>You can also take strings and add onto them values that are not strings. If you do that, the non-string values will be automatically converted into strings.<ul> <li>Example: <code>\"the lowest prime number is \" + 2</code> \u2192 `\"the lowest prime number is 2\"</li> </ul> </li> </ul> </li> <li><code>\"\\n\"</code><ul> <li>This is the newline symbol. If there is <code>\"\\n\"</code> in a string and you print that string, there will be an enter or a new line where that symbol is.</li> </ul> </li> <li><code>+=</code><ul> <li>The <code>+=</code> operator is an assignment operator, allowing you to easily add to variables. It is shorthand for the following:<ul> <li><code>x = x + 3</code> becomes <code>x += 3</code></li> </ul> </li> <li>There are several other similar assignment operators (<code>-=</code>, <code>/=</code>, <code>%=</code>, <code>*=</code>) that can be used to easily adjust variables.</li> </ul> </li> <li><code>++</code><ul> <li>The <code>++</code> operator is yet another assignment operator, and it is shorthand for increasing a variable by exactly 1.<ul> <li>Example: <code>x += 1</code> \u2192 <code>x++</code></li> </ul> </li> <li>There is also a <code>--</code> operator that decreases a variable by 1.</li> </ul> </li> </ul> <pre><code>public class Main {\n    public static void main(String[] args) {\n        String s = \"\";\n        for (int i = 0; i &lt; 9; i++) {\n            s += \"- - - - - - - - -\\n\";\n        }\n        System.out.println(s);\n    }\n}\n</code></pre>"},{"location":"projects/intro-to-programming/Java101/#functionsmethods","title":"Functions/Methods","text":"<p>Before we start learning Java functions, we have some vocabulary to go over.</p> <p>In Java, what we've thus far been calling a function is actually called a method. For now, we will use the terms interchangeably. In Java102, we will flesh out the differences between functions and methods.</p> <p>Okay, let's get started! Here's a simplified version of the basic syntax for functions/methods in Java (later on we'll learn about situations where this doesn't apply):</p> <pre><code>static returnType name(argumentType argumentName) {\n    // code to run\n    return // value to return\n}\n</code></pre> <p>Some things to note:</p> <ol> <li>For now, you must have the word <code>static</code> in front of your functions (we'll get to why in Java102).</li> <li>You must specify the return type (the data type of the return value) of your function.</li> <li>You must specify the type of each argument that your function takes</li> </ol> <p>Here's how we would write a function analogous to this mathematical function: $f(x) = 2x$</p> <pre><code>static double f(double x) {\n    return 2 * x;\n}\n</code></pre> <p>Then you can test the function by calling it in the main function and printing the result:</p> <pre><code>public static void main(String[] args) {\n    System.out.println(\"f(3): \" + f(x));\n}\n</code></pre> <p>But if you have to specify the return type, what do you do if you want to write a function that doesn't return anything? Well, instead of a return type you use a key word that means no return type: <code>void</code></p> <p>As an example, let's write a function that prints an integer array in a readable format:</p> <pre><code>static void printIntArray(int[] arr) {\n    String str = \"(\";\n    for (int i = 0; i &lt; arr.length; i++) {\n        str += arr[i];\n        if (i != arr.length - 1) {\n            str += \", \";\n        }\n    }\n    str += \")\";\n    System.out.println(str);\n}\n</code></pre> <p>Go through this line by line until you understand what's happening. Once you've done that, test it out on a few arrays!</p> <p>Now, like many functions that use side effects, this isn't necessarily the best way to accomplish our goal. Instead of having a function that returns nothing and prints the array, we could have a function that returns the string form of the array, and we could print that ourselves, like this:</p> <pre><code>static String intArrToString(int[] arr) {\n    String str = \"(\";\n    for (int i = 0; i &lt; arr.length; i++) {\n        str += arr[i];\n        if (i != arr.length - 1) {\n            str += \", \";\n        }\n    }\n    return str + \")\";\n}\n</code></pre> <pre><code>public static void main(String[] args) {\n    int[] arr = {1, 4, 6, 9};\n    System.out.println(intArrToString(arr));\n}\n</code></pre> <p>This would allow us to build on our function in the future. For instance, let's say we wanted to be able to print a 2d int array (like our tic tac toe board), we could do the following:</p> <pre><code>static String boardToString(int[][] board) {\n    String str = \"\";\n    for (int i = 0; i &lt; board.length; i++) {\n        str += intArrToString(board[i]);\n        if (i != board.length - 1) {\n            str += \"\\n\";\n        }\n    }\n    return str;\n}\n</code></pre>"},{"location":"projects/intro-to-programming/Java101/#practice-problems","title":"Practice Problems","text":"<p>Before you start, let's do some setup. Make a new file called something like <code>PracticeProblems.java</code>. The file should look something like this:</p> <pre><code>public class PracticeProblems {\n\n}\n</code></pre> <p>Write all your functions inside <code>PracticeProblems</code>. To test them, go back to your <code>Main.java</code> file and run your tests from the <code>main</code> function. You can call a function <code>f</code> in <code>PracticeProblems</code> using <code>PracticeProblems.f()</code>. Here's an example:</p> <pre><code>public class Main {\n    public static void main(String[] args) {\n        int[] arr = {4, 3, 2, 8, 3};\n        System.out.println(PracticeProblems.countOccurances(arr, 3));\n    }\n}\n</code></pre> <p>Important: Whenever you get to a stopping point (solve a problem, close your computer to take a break) save your changes by committing and pushing!</p> <pre><code>git add .\ngit commit -m \"description of what you did\"\ngit push\n</code></pre>"},{"location":"projects/intro-to-programming/Java101/#problems","title":"Problems","text":"<ol> <li>Write a function called <code>countOccurrences</code> that takes an integer array <code>arr</code> and an integer <code>n</code>, and returns the number of times that <code>n</code> appears in <code>arr</code>.</li> <li>Write a function called <code>reverseArray</code> that takes an integer array <code>arr</code> and returns a new array with the elements of <code>arr</code> but in reverse order.</li> <li>Write a function called <code>sumGrid</code> that takes a 2d double array <code>grid</code> and returns the sum of all the elements. Hint: you can do this with nested for loops (look up what that is).</li> <li>Write a function called <code>fib</code> that takes an integer <code>n</code> and returns the <code>nth</code> number in the fibonacci sequence (starting with $0$ $1$).</li> </ol>"},{"location":"projects/intro-to-programming/Java102/","title":"Java 102","text":""},{"location":"projects/intro-to-programming/Java102/#introduction","title":"Introduction","text":""},{"location":"projects/intro-to-programming/Java102/#prerequisites","title":"Prerequisites","text":"<ul> <li>Comfortable with all of the goals for Java101.</li> <li>Comfortable with command-line navigation</li> <li>Environment set up<ul> <li>Code directory created</li> <li>VSCode installed</li> <li>Git &amp; Github set up</li> </ul> </li> </ul>"},{"location":"projects/intro-to-programming/Java102/#goals","title":"Goals","text":"<p>Familiarity with the following concepts:</p> <ul> <li>Classes and Objects<ul> <li>fields</li> <li>constructors</li> <li>methods</li> <li>static</li> <li>public/private</li> </ul> </li> <li>Polymorphism<ul> <li>Interfaces</li> <li>Generics</li> <li>Inheritance</li> </ul> </li> <li>Functional Interfaces</li> <li>Streams</li> </ul>"},{"location":"projects/intro-to-programming/Java102/#best-practices","title":"Best Practices","text":"<p>See Java101.</p>"},{"location":"projects/intro-to-programming/Java102/#setup","title":"Setup","text":"<p>If you did Java101, use the same repository that you used there. Otherwise, follow the instructions in Java101 to set up a repository.</p> <p>Make another directory called <code>java102</code>. We'll be working in that directory. Make a file in java102 called <code>Main.java</code>, as well as a <code>README.md</code> file.</p> <p>Note: you will likely need to add <code>package java102;</code> to the top of each Java file you make in the <code>java102</code> directory.</p> <p>In the README, link this guide.</p>"},{"location":"projects/intro-to-programming/Java102/#classes-and-objects","title":"Classes and Objects","text":""},{"location":"projects/intro-to-programming/Java102/#objects","title":"Objects","text":"<p>An object in Java is a bundle of related data and functions that work together to perform specific tasks in a program. Think of it as a custom-built tool that combines information (fields) and actions (methods) into a single unit.</p> <p>For example, if you're planning the trajectory of a robot through a 2d plane, you might have a Point object. This object would store the x and y coordinates of the point, and would have one method to translate a Point in the x direction, and one to translate it in the y direction.</p>"},{"location":"projects/intro-to-programming/Java102/#classes","title":"Classes","text":"<p>In Java, a class is like a blueprint or template for creating objects. It defines what data and methods the objects will have. An object is an instance of a class - a specific realization of that blueprint. Classes can also hold what are called static methods or fields that are related to objects of that class, but that don't actually belong to individual objects. For example, a <code>Point</code> class might have a method that finds the distance between two <code>Point</code> objects.</p> <p>A class can also be thought of as the type of an object. So if you were to make a point variable, the type of that variable would be <code>Point</code>. In fact, some of the types that we've been using are object types (specifically Strings and arrays -- although arrays are a special case). Generally, whenever there is a type that is capitalized, that is an object type.</p>"},{"location":"projects/intro-to-programming/Java102/#point","title":"Point","text":"<p>Let's write out the class that is a blueprint for the <code>Point</code> object that we described:</p> <p>First off, create a new file called <code>Point.java</code>. The contents should look like this:</p> <pre><code>public class Point {\n\n}\n</code></pre>"},{"location":"projects/intro-to-programming/Java102/#fields","title":"Fields","text":"<p>Next, we'll declare the fields that will store data for the object. We want to store the x and y coordinates, both of which are doubles. We do this similarly to how we declared variables in Java101, but with a couple differences:</p> <ul> <li>We will not use the word <code>static</code>, because these fields belong to individual points.</li> <li>We will write <code>public final</code> before the type and name of each field.<ul> <li>Adding <code>final</code> before a variable ensures that that once initialized, a variable cannot be mutated. In this case, the x and y coordinates of a point should never change. If they did, we would no longer be talking about the same point, and that would get very confusing.</li> </ul> </li> <li>We will declare our variables without initializing them. <ul> <li>In other words, we will write the names and types of the variables, indicating that they exist and allowing us to reference them in other parts of the code. (This is called declaring a variable.)</li> <li>But we will not give them values (also called initializing variables). Instead, each instance of the <code>Point</code> class (each <code>Point</code> object) will have its own values for <code>x</code> and <code>y</code>.</li> </ul> </li> </ul> <pre><code>public class Point {\n    public final double x;\n    public final double y;\n}\n</code></pre>"},{"location":"projects/intro-to-programming/Java102/#constructor","title":"Constructor","text":"<p>Okay, we have now declared fields to store the x and y coordinates of our points.</p> <p>Next up, we need to write what's called a constructor. A constructor is a special kind of function that creates an object. Each class has a constructor, and that constructor is called to generate a new object instance of that class. If there's anything about an object that you want to be different for each object, you generally do that in the constructor. </p> <p>So, in this case, we want each <code>Point</code> to have its own values for <code>x</code> and <code>y</code>, and we want whoever makes the <code>Point</code> to be able to decide those values. We can do that by having the constructor take <code>x</code> and <code>y</code> values as arguments (or inputs).</p> <p>The syntax for writing constructors somewhat similar to how we wrote functions in Java101. Here are the differences:</p> <ul> <li>We won't use the word <code>static</code> (again, this belongs to a particular <code>Point</code>).</li> <li>We will add the word <code>public</code>.</li> <li>We will not specify a return type (this is because the return type of a constructor is always going to be the type of the object, in this case a <code>Point</code>).</li> <li>The name of the constructor is always the same as the name of the class (so <code>Point</code>).</li> <li>We don't need to return anything. A new <code>Point</code> is automatically created and then returned.</li> </ul> <p>Here we go:</p> <pre><code>public class Point {\n    public final double x;\n    public final double y;\n\n    public Point(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n}\n</code></pre> <p>The one thing in the constructor that we haven't explained yet is the keyword <code>this</code>. The <code>this</code> keyword is used to refer to the top level scope of a particular object (the object scope). All non-static fields and methods are part of that scope. So when the constructor says <code>this.x</code>, it is referring to its <code>x</code> field. When the constructor just says <code>x</code>, however, without the <code>this</code>, it is referring to the argument <code>x</code> that was passed into the constructor. That <code>x</code> was declared more recently, so, as we discussed in Programming101, it will by default shadow the top level field <code>x</code>.</p> <p>This means that when the constructor has <code>this.x = x</code>, the first <code>x</code> refers to the field, and the second <code>x</code> refers to the argument. So it is setting the value of the field <code>x</code> to be whatever value for <code>x</code> was passed into the constructor as an argument (and the same with <code>y</code>).</p> <p>So now we have a way to create a new <code>Point</code> object. Let's try it out! Go back to your main file, and add the following inside of the <code>main</code> function:</p> <pre><code>Point point = new Point(4, 3);\n</code></pre> <p>The keyword <code>new</code> is always used before calling a constructor to create a new object (remember arrays -- add link). We passed into the constructor 4 and 3, so the coordinates of our point should be (4, 3). Let's check! We can access the fields of an object by using the notation <code>object.field</code>:</p> <pre><code>System.out.println(\"x: \" + point.x + \"y: \" + point.y);\n</code></pre> <p>Run the code, and see if the values that are printed are what you expect!</p>"},{"location":"projects/intro-to-programming/Java102/#translation","title":"Translation","text":"<p>Now, go back to the <code>Point.java</code> file. We're going to write a method to translate a point in the x direction. We'll do this just like we defined functions in Java101, with the following changes:</p> <ul> <li>We won't use the word <code>static</code> because this method belongs to each particular <code>Point</code>.<ul> <li>In other words, each <code>Point</code> not only has its own values of <code>x</code> and <code>y</code>, but also its own methods for translation that use its values of <code>x</code> and <code>y</code>.</li> </ul> </li> <li>We will add the word <code>public</code> (we'll explain this later).</li> </ul> <p>Let's call this method <code>translateX</code>. This is a method that belongs to the <code>Point</code> class, so it already has access to the data stored in the object (<code>x</code> and <code>y</code>). The only other input that it needs is how much to translate by. We'll call that value <code>t</code>.</p> <p>The return type of <code>translateX</code> will be a new <code>Point</code>, because it is returning the point that will result after a translation.</p> <pre><code>public class Point {\n    public final double x;\n    public final double y;\n\n    public Point(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    public Point translateX(double t) {\n        return new Point(x + t, y);\n    }\n}\n</code></pre> <p>We can also add a method to translate in the y direction:</p> <pre><code>public class Point {\n    public final double x;\n    public final double y;\n\n    public Point(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    public Point translateX(double t) {\n        return new Point(x + t, y);\n    }\n\n    public Point translateY(double t) {\n        return new Point(x, y + t);\n    }\n}\n</code></pre> <p>Okay, let's test our our new methods! Go back to <code>Main.java</code>. Inside the <code>main</code> function, we're going to reflect <code>point</code> a few times.</p> <pre><code>Point xTranslation = point.translateX(3); // should be (7, 3)\nPoint yTranslation = point.translateY(-7); // should be (4, -4)\nPoint xyTranslation = point.translateX(-4).translateY(-3); // should be (0, 0)\n</code></pre> <p>Now that we have the lots of translations, let's print out the x and y values of our new points to check that they're correct.</p> <pre><code>System.out.println(\"x transl: (\" + xTranslation.x + \", \" + xTranslation.y + \")\");\nSystem.out.println(\"y transl: (\" + yTranslation.x + \", \" + yTranslation.y + \")\");\nSystem.out.println(\"xy transl: (\" + xyTranslation.x + \", \" + xyTranslation.y + \")\");\n</code></pre> <p>You can run the code and make sure the values are what you expected.</p>"},{"location":"projects/intro-to-programming/Java102/#tostring","title":"ToString","text":"<p>One thing you might notice is that the code we wrote to print out our points is pretty repetitive. We wrote essentially the same thing 3 times, but we used different variables. Usually, when you're writing repetitive code, there's a more efficient option. In this case, we're going to add a <code>toString</code> method.</p> <p>A <code>toString</code> method tells the computer how to convert an object into a <code>String</code>. When you write <code>System.out.println(object)</code>, that object is automatically converted to a string and printed using its toString method. </p> <p>Each object has a default <code>toString</code> method. Let's try to print a <code>Point</code> using its default <code>toString</code> method and see what happens:</p> <pre><code>System.out.println(\"point: \" + point);\n</code></pre> <p>You should see something like this: <code>point: Point@15db9742</code> (the sequence of letters and numbers after the @ may be different).</p> <p>That isn't a particularly helpful representation of a <code>Point</code>. What we actually want is something that tells us the <code>x</code> and <code>y</code> coordinates of the point. So we're going to override the default <code>toString</code> method to do that (we'll get into what overriding really means later on). Go back to <code>Point.java</code>.</p> <pre><code>public class Point {\n    public final double x;\n    public final double y;\n\n    public Point(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    public Point translateX(double t) {\n        return new Point(x + t, y);\n    }\n\n    public Point translateY(double t) {\n        return new Point(x, y + t);\n    }\n\n    @Override\n    public String toString() {\n        return \"(\" + x + \", \" + y + \")\";\n    }\n}\n</code></pre> <p>Now, we can simplify our code in <code>Main.java</code>! Instead of printing reflected points like this:</p> <pre><code>System.out.println(\"x transl: (\" + xTranslation.x + \", \" + xTranslation.y + \")\");\nSystem.out.println(\"y transl: (\" + yTranslation.x + \", \" + yTranslation.y + \")\");\nSystem.out.println(\"xy transl: (\" + xyTranslation.x + \", \" + xyTranslation.y + \")\");\n</code></pre> <p>We can do this:</p> <pre><code>System.out.println(\"x transl: \" + xTranslation);\nSystem.out.println(\"y transl: \" + yTranslation);\nSystem.out.println(\"xy transl: \" + xyTranslation);\n</code></pre>"},{"location":"projects/intro-to-programming/Java102/#distance","title":"Distance","text":"<p>Okay, now that we've done that, let's add one last thing to our <code>Point</code> class: a method to find the distance between two points. We'll call it <code>distance</code>.</p> <p>This <code>distance</code> method is going to take two <code>Point</code> objects and find the distance between them. Remember, the <code>distance</code> method will belong to the <code>Point</code> class as a whole, not to particular <code>Point</code> objects. It will be a <code>static</code> method.</p> <p>note: We used the static keyword when we were writing functions and variables in the <code>Main</code> class, because nothing we were writing was meant to be specific to instances of the <code>Main</code> class (in fact, we never created instances of that class).</p> <p>One last thing before we write our distance function: We're going to be using <code>Math.sqrt</code>, which takes the square root of a double, and <code>Math.pow</code>, which is how we calculate exponents (<code>Math.pow(a, b)</code> \u2192 $a ^ b$).</p> <pre><code>public class Point {\n    public final double x;\n    public final double y;\n\n    public Point(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    public Point translateX(double t) {\n        return new Point(x + t, y);\n    }\n\n    public Point translateY(double t) {\n        return new Point(x, y + t);\n    }\n\n    @Override\n    public String toString() {\n        return \"(\" + x + \", \" + y + \")\";\n    }\n\n    public static double distance(Point p1, Point p2) {\n        return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n    }\n}\n</code></pre> <p>Now let's test out the new distance function! Open <code>Main.java</code>. In the main function, create two points, <code>a</code> and <code>b</code>.</p> <p>We access non-static members of a class with <code>object.member</code>. So for instance, to translate point <code>p</code>, we'd call <code>p.translate</code>. But static members don't belong to specific objects, they belong to classes. So instead, we use <code>Class.member</code>. In this case, that would be <code>Point.distance</code>. Run the following line of code and double check it with your own calculations!</p> <pre><code>System.out.println(Point.distance(a, b));\n</code></pre>"},{"location":"projects/intro-to-programming/Java102/#practice-center-of-mass","title":"Practice: Center of Mass","text":"<p>Let's say we have a bunch of points, each of which represents a point mass of equal mass. The center of mass of those points is the average position of the points. So the x coordinate of the center of mass is the average of all of the x coordinates of the points, and the y coordinate is the average of all of the y coordinates.</p> <p>Write a static method for the <code>Point</code> class that takes as an argument an array of <code>Point</code> objects, and returns the center of mass, as a <code>Point</code>. Here's the header (there will be a ; at the end, but when you actually write it there should be curly braces instead):</p> <pre><code>public static Point centerOfMass(Point[] points);\n</code></pre> <p>When you're done, test our your new function with some simple examples!</p> <p>Also, if you haven't yet, now would be a great time to commit and push your changes.</p>"},{"location":"projects/intro-to-programming/Java102/#practice-angle","title":"Practice: Angle","text":"<p>Write a non-static method that calculates and returns the angle in degrees between a point and the positive x axis. Or more specifically, the angle of point p is the angle from the positive x axis to the line that goes through the origin and point p. Counterclockwise is positive. </p> <p>This will require trigonometry. If you're not familiar with basic trig, look at this doc.</p> <p>You can look up how to perform trigonometric functions in Java (the Java trig functions generally operate in radians, so you'll need to use <code>Math.toDegrees</code> and <code>Math.toRadians</code> to make sure you're being consistent about units).</p> <p>Also, be careful to think about all the cases! This should work in all four quadrants.</p> <p>Here's the header:</p> <pre><code>public double angle();\n</code></pre>"},{"location":"projects/intro-to-programming/Java102/#challenge-rotation","title":"Challenge: Rotation","text":"<p>As a challenge, try to write a method that rotates a point by <code>theta</code> degrees. To think about what this means, imagine a circle centered around the origin of a plane that passes through point p. The rotation of point p by positive 30 degrees is another point on that circle, but the angle between this new point and the positive x axis should be 30 degrees bigger than the angle between p and the positive x axis.</p> <p>Making a generalized form of this function will require trig. But first, try making a method that just rotates a point by 90 degrees counterclockwise:</p> <pre><code>public Point rotate90();\n</code></pre> <p>Once you've written and tested that, try a general rotate method:</p> <pre><code>public Point rotate(double theta);\n</code></pre>"},{"location":"projects/intro-to-programming/Java102/#polymorphism","title":"Polymorphism","text":"<p>Polymorphism is a concept in programming that means \"many shapes\" or \"many forms.\" It refers to the idea that single thing (like a piece of code) can behave differently depending on how it's used. It allows a single function or operation or class or structure to work with different types of data, making programs more flexible and easier to manage.</p> <p>Think of it like how a tool like a wrench can work on different sizes of nuts and bolts. The wrench is one tool, but it can adjust to different tasks. Similarly, polymorphism lets code adjust and work in different situations without needing to be rewritten.</p> <p>In Java, there are several forms of polymorphism that we're going to talk about.</p>"},{"location":"projects/intro-to-programming/Java102/#generics","title":"Generics","text":"<p>Generics are a form of what's called parametric polymorphism. They are perhaps the simplest polymorphism in Java - and you've actually already seen them used in several places.</p> <p>Generics allows you to write classes and methods that can work with any data type while maintaining type safety. For example, an array uses generics so that it can store any type of object\u2014<code>Integer</code>, <code>String</code>, <code>Boolean</code> etc\u2014instead of having a separate class for each type of array.</p> <p>Something to note: I used the capital words for each of those types. That's because generics must be object types. Non-capitalized types (i.e. int, boolean, etc) are not object types. Instead they are primitives (look it up if you're interested). But each of them does have a corresponding object type, so those are what we use for cases like this.</p>"},{"location":"projects/intro-to-programming/Java102/#arraylists","title":"ArrayLists","text":"<p>Now, arrays are somewhat of a special case, and there are actually several differences between generics in arrays and other generics.</p> <p>So instead of talking about arrays, let's talk about ArrayLists. An <code>ArrayList</code> is similar to an array, but without a fixed length. So you can add new elements to an <code>ArrayList</code>.</p> <p>Here's how that works: an <code>ArrayList</code> stores its values in an <code>Array</code> that is longer than the length of the <code>ArrayList</code> (so if there are 5 elements in the <code>ArrayList</code>, those elements might be stored in the first 5 spots of a 10 element <code>Array</code>). When you add an element to the <code>ArrayList</code>,  it populates the next spot. If you keep adding elements, the <code>Array</code> eventually becomes full. At that point, if you try to add another element, the <code>ArrayList</code> will create a new <code>Array</code> with 1.5 times the size of the old array (i.e. from 10 to 15), and copy all the elements from the old <code>Array</code> to the new one.</p> <p>Let's look at how we would make an <code>ArrayList</code> of strings in the <code>main</code> method of our <code>Main.java</code> file:</p> <pre><code>ArrayList&lt;String&gt; arr = new ArrayList&lt;&gt;();\n</code></pre> <p>So starting from the beginning of the line, the type for this variable is <code>ArrayList&lt;String&gt;</code>.  Inside the <code>ArrayList</code> class, the type of the element is not specified. It could be a <code>String</code> or an <code>Integer</code> or an <code>ArrayList</code> or a <code>double[]</code>, and whichever one it is, the <code>ArrayList</code> functions the same way. So when we make a new <code>ArrayList</code>, that's when we specify what the type of the elements are. The triangle brackets are the syntax in Java for doing that. So the type is <code>ArrayList&lt;String&gt;</code>, because it's an <code>ArrayList</code> with elements of type <code>String</code>.</p> <p>After the assignment operator (=), we create a new <code>ArrayList</code> using the class's constructor. The square brackets are there as well because the constructor also needs to know the type of the elements. In this particular case, we don't need to actually put the type in there because we already specified the type earlier, so the computer can infer that the same type (<code>String</code>) applies to the constructor as well. If we weren't saving the <code>ArrayList</code> as a variable (and therefore specifying its type), we would have to specify in the constructor: <code>new ArrayList&lt;String&gt;()</code>. The <code>ArrayList</code> starts out with 0 elements.</p> <p>We can (but do not have to) pass in an integer to the constructor. That integer sets not the initial size of the <code>ArrayList</code>, but instead the initial size of the <code>Array</code> in the <code>ArrayList</code>. This isn't typically something that will be necessary, but if you're creating an <code>ArrayList</code> and you know how long it's going to be, you might as well give that to the constructor.</p> <p>Now that we have our ArrayList <code>arr</code>, let's do something with it! We can get values from an ArrayList using the <code>get</code> method that takes an index. We can set values using <code>set</code> which takes an index and the value to set. We can see how many values are currently there using the <code>size</code> method. And we can add values by using the <code>add</code> method which takes a value to add.</p> <p>Oh, and unlike arrays, <code>ArrayLists</code> have <code>toString</code> methods that actually let us see the elements!</p> <p>Okay, let's build up <code>arr</code>:</p> <pre><code>arr.add(\"Hello\");\narr.add(\"World\");\nSystem.out.println(arr);\narr.set(0, \"Goodbye\");\nSystem.out.println(arr);\n</code></pre> <p>Now let's make another array:</p> <pre><code>ArrayList&lt;Boolean&gt; conditions = new ArrayList&lt;&gt;();\nconditions.add(true);\nconditions.add(arr.get(0) == \"Hello\");\nconditions.add(conditions.get(0) || conditions.get(1));\n</code></pre> <p>Try to figure out what each of the three elements of <code>conditions</code> should be. Then print out <code>conditions</code> and check that you were right!</p> <p>Now let's make an Integer ArrayList with 50 elements, all of which are 0:</p> <pre><code>ArrayList&lt;Integer&gt; intArr = new ArrayList&lt;&gt;();\nfor (int i = 0; i &lt; 50; i++) {\n    intArr.add(0);\n}\nSystem.out.println(intArr.size());\nSystem.out.println(intArr.get(32));\n</code></pre>"},{"location":"projects/intro-to-programming/Java102/#grid","title":"Grid","text":"<p>Now that we've used the generics in the context of <code>ArrayLists</code>, let's try making our own class that uses generics.</p> <p>Specifically, we're going to make a <code>Grid</code> class. Each <code>Grid</code> will represent a square grid of objects. We will be able to access and change each object in a <code>Grid</code>, as well as convert a <code>Grid</code> into a string. And all of this will work regardless of what kind of object each <code>Grid</code> contains - we could have one String <code>Grid</code> and one Integer <code>Grid</code> and one Boolean <code>Grid</code>, and they would all work.</p> <p>We're going to store our grids as <code>ArrayLists</code> because using generic types with arrays gets complicated. </p> <p>Okay, so here's how we'd make our grid class:</p> <pre><code>import java.util.ArrayList;\n\npublic class Grid&lt;T&gt; {\n    private final ArrayList&lt;ArrayList&lt;T&gt;&gt; grid;\n    public final int sideLength;\n\n    public Grid(int sideLength, T defaultVal) {\n        this.sideLength = sideLength;\n        this.grid = new ArrayList&lt;ArrayList&lt;T&gt;&gt;(sideLength);\n        for (int i = 0; i &lt; sideLength; i++) {\n            grid.add(new ArrayList&lt;&gt;(sideLength));\n            for (int j = 0; j &lt; sideLength; j++) {\n                grid.get(i).add(defaultVal);\n            }\n        }\n    }\n\n    public T get(int row, int col) {\n        return grid.get(row).get(col);\n    }\n\n    public void set(int row, int col, T val) {\n        grid.get(row).set(col, val);\n    }\n\n    @Override\n    public String toString() {\n        String str = \"\";\n        for (ArrayList&lt;T&gt; row : grid) {\n            for (T element : row) {\n                str += element + \" \";\n            }\n            str += \"\\n\";\n        }\n        return str;\n    }\n}\n</code></pre> <p>Okay, let's go through this step by step:</p> <p>At the very top, above the class declaration, we have this line:</p> <pre><code>import java.util.ArrayList;\n</code></pre> <p>Unlike Strings and Integers and all of the Math functions we've used, to use an ArrayList you need to import it. The definition of the <code>ArrayList</code> class is not accessible unless you do that, so you won't be able to use it.</p> <p>The name of the class is not written simply as <code>Grid</code>, but as <code>Grid&lt;T&gt;</code>.  That indicates that this class uses a generic type called <code>T</code>. Within this class, whenever <code>T</code> is used, it is referring to the same unspecified type. When someone creates a new <code>Grid</code>, they will specify what type of <code>Grid</code> it is. If it is a string Grid, or a <code>Grid&lt;String&gt;</code>, then for that particular <code>Grid</code>, the type <code>T</code> will be <code>String</code>.</p> <p>The <code>Grid</code> class has two fields: <code>grid</code> and <code>sideLength</code>. <code>sideLength</code> is simply the length of the grid (the number of values in each row and column). </p> <p><code>grid</code>, on the other hand, actually stores the grid and its elements. Its type is <code>ArrayList&lt;ArrayList&lt;T&gt;&gt;</code> because the grid is represented by a 2D arraylist, and the elements of the grid are of course of type <code>T</code>.</p> <p>A couple of things you may have noticed about <code>grid</code>: </p> <p>First off, I said at some point that the keyword <code>final</code> prevents variables or fields from being mutated. But <code>grid</code> is a final variable, and yet we mutate its values in the <code>set</code> method. What gives? Well, <code>final</code> variables cannot be reassigned to totally new values. If, however, the value of a <code>final</code> variable is an object that can be mutated, you can mutate the object. So if you have <code>final int[] arr = new int[4]</code>, you cannot then say <code>arr = {4, 3, 2}</code>, but you can say <code>arr[2] = 7</code>. And the same thing goes with a final <code>ArrayList</code> variable. You can't reassign the variable, but you can set values in the list.</p> <p>So, when we say that <code>grid</code> is <code>final</code>, all that does is prevent anyone from reassigning <code>grid</code> to an entirely new <code>ArrayList</code>.</p> <p>The other thing you may have noticed is that I used the keyword <code>private</code> here for the first time. Thus far, we have only used <code>public</code>.</p> <p>The keywords <code>private</code> and <code>public</code> describe who is able to see and interact with different members of a class. Anything <code>public</code> can be accessed directly by anyone. Anything <code>private</code> can only accessed directly by other members of the class.</p> <p>In Point, our coordinates were <code>public</code>, so anyone could access them (i.e. in <code>Main.java</code> we were not inside of the <code>Point</code> class, but we were still able to access <code>point.x</code> and <code>point.y</code>). They were also <code>final</code>, which is important. An integer that is <code>public</code> and <code>final</code> can be seen by anyone, but it cannot be changed by anyone. If the coordinates were just <code>public</code> and not <code>final</code>, anyone would be able to see and change them. We would be able to, in <code>Main.java</code>, write <code>point.x = 1</code> and that would change the <code>x</code> value of <code>point</code> to be 1.</p> <p>All of our methods have also been public, which is what allows us to call them in <code>Main.java</code>.</p> <p>In our <code>Grid</code> class, we do want anyone to be able to see the values in our <code>grid</code> and set new values, so why would we make the <code>grid</code> a <code>private</code> field? Well, while we are okay with people setting values of the grid, we would not be okay with someone adding values or resetting an entire row. If <code>grid</code> was a <code>public final</code> variable, and we had a <code>Grid</code> object called <code>g</code>, we would be able to do both of those things:</p> <ol> <li>Adding new rows/columns</li> </ol> <pre><code>g.grid.add(new ArrayList&lt;T&gt;);\n</code></pre> <ol> <li>Resetting an entire row</li> </ol> <pre><code>g.grid.set(0, new ArrayList&lt;T&gt;());\n</code></pre> <p>Generally, when you only want people to be able to interact with field in specific ways (i.e. see or change individual entries in a 2D ArrayList), it is best to make that thing field <code>private</code> and have all interactions with it happen through <code>public</code> methods.</p> <p>Okay, next up, let's look at the constructor. All the constructor takes is a side length and a default value. Then it sets the sideLength field and generates the grid.</p> <p>To start, it sets <code>grid</code> to a blank <code>ArrayList</code>. Then, it loops through the integers <code>i</code> from 0 to the <code>sideLength</code>, and for each value of <code>i</code> it adds another row to <code>grid</code> (that way in the end the number of rows is <code>sideLength</code>). Each row that it adds starts out as another blank <code>ArrayList</code>, but by using another for loop each row is populated with the <code>defaultValue</code>. The end result is a 2D <code>ArrayList</code> whose dimensions are <code>sideLength</code> by <code>sideLength</code>, and for which each element is <code>defaultValue</code>.</p> <p>Now let's turn to the methods. Since <code>grid</code> is <code>private</code>, we need to make methods to access and change the elements in <code>grid</code>, which is why we have <code>get</code> and <code>set</code>. We also have a <code>toString</code> so that we can print a <code>Grid</code> and be able to see its values. Note however that if type <code>T</code> has an unhelpful default <code>toString</code> method (like with arrays), this won't be especially helpful.</p> <p>Look through the three methods and make sure you understand everything that's happening.</p> <p>It's time to test out our <code>Grid</code> class! Open <code>Main.java</code>. Write the following in the <code>main</code> function to make a new grid of integers:</p> <pre><code>Grid&lt;Integer&gt; grid = new Grid&lt;&gt;(5, 0);\ngrid.set(2, 2, 4);\nSystem.out.println(grid);\n</code></pre>"},{"location":"projects/intro-to-programming/Java102/#generics-in-methods-printarray","title":"Generics in methods: printArray","text":"<p>You can also have generics at the individual method scope. So, for instance, if you want a method that prints out all the values in an array, you want that to work generically, regardless of what type of array the method is given. Of course, one option would be to just write that method inside of the <code>Array</code> class, because everything inside the <code>Array</code> class has access to the generic type of the elements of the array. But that's not possible, both because we don't have access to that class and because arrays really are a special case.</p> <p>So instead we're going to write a method <code>arrayToString</code> inside of <code>Main</code>. Instead of taking a specific kind of array, we're going to take a <code>T[]</code>, where <code>T</code> will represent whatever the type is of the elements of the array that is passed into our method.</p> <p>Here's how we can do that:</p> <pre><code>static &lt;T&gt; String arrayToString(T[] arr) {\n    String str = \"[\";\n    for (int i = 0; i &lt; arr.length - 1; i++) {\n        str += arr[i] + \", \";\n    }\n    return str + arr[arr.length - 1] + \"]\";\n}\n</code></pre> <p>The key thing here is the <code>&lt;T&gt;</code> that comes before the return type. That says that for this function, we're going to be using some type <code>T</code>. The actual value of that type is determined anew each time the function is called (if it is called with a <code>String[]</code>, <code>T</code> is <code>String</code>).</p> <p>Test this out with some arrays!</p>"},{"location":"projects/intro-to-programming/Java102/#practice-diagonal","title":"Practice: Diagonal","text":"<p>Create a non-static method in <code>Grid</code> called <code>diagonal</code> that returns an <code>ArrayList</code> with the primary diagonal of the grid (from top left to bottom right). Here's the header:</p> <pre><code>public ArrayList&lt;T&gt; diagonal();\n</code></pre>"},{"location":"projects/intro-to-programming/Java102/#practice-maxsidelength","title":"Practice: maxSideLength","text":"<p>Create a static method inside of <code>Grid</code> that returns the biggest <code>sideLength</code> of any <code>Grid</code> that's been made.</p> <p>Hint: use a static field to keep track of the current maximum, and update the maximum in the constructor.</p> <p>Here's the header:</p> <pre><code>public static int maxSideLength();\n</code></pre>"},{"location":"projects/intro-to-programming/Java102/#interfaces","title":"Interfaces","text":"<p>Interfaces are a form of subtype polymorphism. Before I explain what interfaces are, let's build up a scenario in which you might want to use them.</p>"},{"location":"projects/intro-to-programming/Java102/#circle","title":"Circle","text":"<p>We're going to make a <code>Circle</code> class. It'll be simple: just a center and a radius, and some methods to get basic values like its area or to do basic transformations.</p> <pre><code>public class Circle {\n    public final Point center;\n    public final double radius;\n\n    public Circle(Point center, double radius) {\n        this.center = center;\n        this.radius = radius;\n    }\n\n    public double area() {\n        return Math.PI * Math.pow(radius, 2);\n    }\n\n    public double perimeter() {\n        return 2 * Math.PI * radius;\n    }\n\n    /** \n    * @return Whether point p is inside of the circle.\n    */\n    public boolean isInside(Point p) {\n        return Point.distance(center, p) &lt; radius;\n    }\n\n    /** \n    * @return Whether point p part of/on the border of the circle.\n    */\n    public boolean isOn(Point p) {\n        return Point.distance(center, p) == radius;\n    }\n\n    /** \n    * @param x How much to translate the circle by in the + x direction.\n    * @param y How much to translate the circle by in the + y direction.\n    * @return The circle that results from the translation.\n    */\n    public Circle translate(double x, double y) {\n        return new Circle(center.translateX(x).translateY(y), radius);\n    }\n\n    /** \n    * @return The circle that results from scaling by k.\n    */\n    public Circle scale(double k) {\n        return new Circle(center, radius * k);\n    }\n\n    @Override\n    public String toString() {\n        return \"(center: \" + center + \"; radius: \" + radius + \")\";\n    }\n}\n</code></pre> <p>You may notice that I used a kind of comment that I haven't used before. These are called javadoc comments, and they're a great way to add commentary explaining how your methods work. When you're calling these methods from <code>Main</code> and you hover over the names of the methods, you should see the comments.</p> <p>Go back to you <code>Main</code> file and play around with this class a little bit. Make some circles, get their areas, check if certain points are on or inside of the circles, make transformations.</p>"},{"location":"projects/intro-to-programming/Java102/#square","title":"Square","text":"<p>Now we're going to make a <code>Square</code> class. Instead of a center and a radius, it will have the bottom left corner and the side length. (The sides of the square are necessarily parallel to the x and y axes). <code>Square</code> will have all of the same methods as <code>Circle</code>, as well as a method that returns an array of the corners. I will write some of the methods for you, and leave some blank for you to write.</p> <pre><code>public class Square {\n    public final Point corner;\n    public final double sideLength;\n\n    /**\n    * @param corner The bottom left corner of the square\n    * @param sideLength\n    */\n    public Square(Point corner, double sideLength) {\n        this.corner = corner;\n        this.sideLength = sideLength;\n    }\n\n    public double area() {\n        // write this\n    }\n\n    public double perimeter() {\n        // write this\n    }\n\n    /** \n    * @return Whether point p is inside of the square.\n    */\n    public boolean isInside(Point p) {\n        double xDist = p.x - corner.x;\n        double yDist = p.y - corner.y;\n        return 0 &lt; xDist &amp;&amp; xDist &lt; sideLength &amp;&amp;\n               0 &lt; yDist &amp;&amp; yDist &lt; sideLength;\n    }\n\n    /** \n    * @return Whether point p part of/on the border of the square.\n    */\n    public boolean isOn(Point p) {\n        // write this\n    }\n\n    /** \n    * @param x How much to translate the sqaure by in the + x direction.\n    * @param y How much to translate the squarer by in the + y direction.\n    * @return The sqaure that results from the translation.\n    */\n    public Square translate(double x, double y) {\n        // write this\n    }\n\n    /** \n    * @return The sqaure that results from scaling the side length and maintaining the bottom left corner\n    */\n    public Square scale(double k) {\n        return new Square(corner, sideLength * k);\n    }\n\n    public Point[] corners() {\n        // write this\n    }\n\n    @Override\n    public String toString() {\n        return \"(corner: \" + corner + \"; side length: \" + sideLength + \")\";\n    }\n}\n</code></pre> <p>Fill in the missing functions, and experiment with some squares in <code>Main.java</code>.</p>"},{"location":"projects/intro-to-programming/Java102/#sumarea","title":"SumArea","text":"<p>Okay, so now I want to have, in the <code>Main.java</code> file, an array of shapes, both <code>Square</code> and <code>Circle</code> objects, and to have a function that finds the sum of the areas of all the shapes.</p> <p>In untyped pseudocode (like in Programming101), here's how we might loop through an array of shapes to find the sum of the areas:</p> <pre><code>def sumAreas(var shapes) {\n    var sum = 0\n    for (var shape : shapes) {\n        sum += shape.area()\n    }\n    return sum\n}\n</code></pre> <p><code>Circle</code> and <code>Square</code> objects both have <code>area</code> methods, so if the computer followed those instructions the code would work. But the computer doesn't really have any way of knowing that it would work.</p> <p>What happens when you try to take this code and add types to it? Well, what type is <code>shapes</code>? It's an array, but an array of what? It's definitely not a <code>Square[]</code> or a <code>Circle[]</code>. We may know that the <code>shape.area</code> method exists for every value in <code>shapes</code>, but for the computer to understand that this code is safe, it has to know that too. That's what types are for.</p> <p>We want one type that describes both <code>Circle</code> and <code>Square</code> objects. And what information does the computer need to know about this new type? Well it needs to know that this type of object has an <code>area</code> method that it can call. (Ideally, it would also know that the new type had all of the other methods that <code>Circle</code> and <code>Square</code> objects have in common, although that's not important for <code>sumAreas</code> in specific).</p> <p>We can do this by creating an interface. An interface allows us to define a contract that classes can implement, specifying what methods they should have without providing the implementation details.</p> <p>In a <code>Shape</code> interface, we would want to have the methods that <code>Circle</code> and <code>Square</code> have in common. Let's start with just the <code>area</code> function, since it's relevant to our example:</p> <pre><code>public interface Shape {\n    double area();\n}\n</code></pre> <p>Notice, we just write the headers of the methods, not the implementations. Different kinds of shapes will have their own unique implementations.</p> <p>Now, we need to tell our program that <code>Circle</code> and <code>Square</code> objects follow the <code>Shape</code> interface. We say that these classes implement the <code>Shape</code> interface. Here's how we show that in the code:</p> <pre><code>public class Circle implements Shape {\n</code></pre> <pre><code>public class Square implements Shape {\n</code></pre> <p>Side note: classes can implement multiple interfaces</p> <p>Now that you've updated your <code>Square</code> and <code>Circle</code> classes, you should be good to go! At this point, if you were to delete the <code>area</code> method from one of these classes (try it!), you would get an error, because <code>Circle</code> and <code>Square</code> are now required to have an <code>area</code> method.</p> <p>Okay, let's write our <code>sumArea</code> method in <code>Main.java</code>:</p> <pre><code>static double sumArea(Shape[] shapes) {\n    double sum = 0;\n    for (Shape shape : shapes) {\n        sum += shape.area();\n    }\n    return sum;\n}\n</code></pre> <p>Now test it out in the <code>main</code> method!</p> <pre><code>Shape[] shapes = {new Circle(new Point(1.8, -20), 2), \n                  new Square(new Point(100, 2.1), 5.4),\n                  new Circle(new Point(0, 0), 1),\n                  new Circle(new Point(4, 9.123), 98.32),\n                  new Square(new Point(-321, 0), 0.02)};\nSystem.out.println(sumArea(shapes));\n</code></pre> <p>You should get around $30414.09$.</p>"},{"location":"projects/intro-to-programming/Java102/#scaleall","title":"ScaleAll","text":"<p>Next, lets write a static method in main that takes a <code>double</code> and <code>Shape[]</code> and returns a new <code>Shape[]</code>, but with each of the shapes scaled by the <code>double</code>.</p> <pre><code>static Shape[] scaleAll(Shape[] shapes, double k) {\n    Shape[] scaled = new Shape[shapes.length];\n    for (int i = 0; i &lt; shapes.length; i++) {\n        scaled[i] = shapes[i].scale(k);\n    }\n    return scaled;\n}\n</code></pre> <p>The only problem with this is that it <code>Shape</code> objects only have <code>area</code> methods. For this purpose, we need them to have <code>scale</code> methods as well. So let's add that!</p> <pre><code>public interface Shape {\n    public double area();\n\n    /** \n    * @return The shape that results from scaling by k.\n    */\n    public Shape scale(double k);\n}\n</code></pre> <p>One thing to note about this new header: the return type for <code>scale</code> is <code>Shape</code>.</p> <p>In our <code>Circle</code> class, the return type for the <code>scale</code> method is <code>Circle</code>. In our <code>Square</code> class, the return type is <code>Square</code>. So why is the return type here <code>Shape</code>?</p> <p>Well, the <code>Circle</code> and <code>Square</code> objects are both examples of <code>Shape</code> objects, since they implement the <code>Shape</code> interface. So <code>Circle</code> and <code>Square</code> do indeed both have <code>scale</code> methods that return <code>Shape</code> objects.</p> <p>And that's enough information for us. We want to scale an array of <code>Shape</code> objects, and we want to put all of those return values into another array of <code>Shape</code> objects. So what we need to know, really, is that the <code>scale</code> method returns a <code>Shape</code>.</p> <p>Now, we are losing some information here. With this <code>Shape</code> interface, I could do the following:</p> <pre><code>public class FakeShape implements Shape {\n    public double area() { return 0; }\n\n    public Square scale(double k) { \n        return new Square(new Point(0, 0), 1); \n    }\n}\n</code></pre> <p>I've created a new <code>Shape</code> class called <code>FakeShape</code>, but unlike <code>Circle</code> and <code>Square</code>, each of which have <code>scale</code> methods that return another instance of their own class, <code>FakeShape</code> has a <code>scale</code> method that returns a <code>Square</code>. That doesn't make much sense if you think about what it means to scale a shape - when you scale something you don't get a new type of shape, just a different size of the same shape. But the requirement in <code>Shape</code> is only that the return type of <code>scale</code> is a <code>Shape</code>, not that it's the same type as the class that its in.</p> <p>But we're just going to ignore that and trust ourselves to write reasonable code. (This can also cause other minor issues that you're unlikely to run into, but that's how this language goes).</p> <p>Test out the the <code>scaleAll</code> method in <code>main</code>! (It may take a little creativity since you can't just print out an array and see its contents).</p>"},{"location":"projects/intro-to-programming/Java102/#shape","title":"Shape","text":"<p>Anyway, we've now added <code>scale</code> to our <code>Shape</code> interface, but we don't have to stop there. There are more methods that all shapes (or at least the shapes in this guide) have. So let's add them all! Here's the new interface that defines what it means to be a <code>Shape</code>:</p> <pre><code>public interface Shape {\n    public double area();\n\n    public double perimeter();\n\n    /** \n    * @return Whether point p is inside of the shape.\n    */\n    public boolean isInside(Point p);\n    /** \n    * @return Whether point p part of/on the border of the shape.\n    */\n    public boolean isOn(Point p);\n\n    /** \n    * @param x How much to translate the shape by in the + x direction.\n    * @param y How much to translate the shape by in the + y direction.\n    * @return The shape that results from the translation.\n    */\n    public Shape translate(double x, double y);\n\n    /** \n    * @return The shape that results from scaling by k.\n    */\n    public Shape scale(double k);\n}\n</code></pre>"},{"location":"projects/intro-to-programming/Java102/#practice-frompoints","title":"Practice: fromPoints","text":"<p>In the <code>Circle</code> class, create a static method that generates a <code>Circle</code> from three points that are on the edge of the circle (if you don't remember and can't figure out how to do this, look it up).</p> <pre><code>public static Circle fromPoints(Point p1, Point p2, Point p3);\n</code></pre>"},{"location":"projects/intro-to-programming/Java102/#practice-right-triangle","title":"Practice: Right Triangle","text":"<p>Create a <code>RightTriangle</code> class that implements <code>Shape</code>. The sides of the triangle are necessarily parallel to the x and y axes, but the right angle can be in any corner (top right, bottom left, etc). You can store a corner and two side lengths (or any other combination of fields that describe a right triangle).</p> <p>In addition to all the methods in <code>Shape</code>, <code>RightTriangle</code> should have a static method called <code>similar</code> that takes two <code>RightTriangle</code> objects and returns whether or not they are similar.</p>"},{"location":"projects/intro-to-programming/Java102/#inheritance","title":"Inheritance","text":"<p>Inheritance is a form of polymorphism in Java that allows a class to inherit properties and methods from another class. We're not going to spend much time on this because inheritance is rarely the best solution to a problem and generally introduces more issues than it solves. In most cases, interfaces or generics provide simpler and more elegant solutions. Understanding inheritance will be most useful for understanding and interacting with the infrastructure that has already been written by other people.</p> <p>Inheritance is a way of having classes that inherit the traits (methods and fields) of other classes. If class <code>B</code> extends (or inherits from) class <code>A</code>, then a <code>B</code> object will also be an example of an <code>A</code> object and can b treated as such. This is similar to our interfaces, where <code>Circle</code> and <code>Square</code> were examples of <code>Shape</code> objects, with two main differences:</p> <ol> <li><code>A</code> is just an ordinary class. You can't just make a new <code>Shape</code> -- that doesn't mean anything. you have to make a <code>Square</code> or <code>Circle</code>. But you can just make a new <code>A</code>.</li> <li>The <code>A</code> class has methods with real implementations (including a constructor) and fields with values. It isn't just a template for its child classes (classes that inherit from it) to follow. <code>B</code> will be able to call methods from <code>A</code>. When you create a new <code>B</code>, the constructor for <code>B</code> will call the constructor for <code>A</code>. If you have an <code>B</code> object called <code>b</code>, you can call the methods that are defined in <code>A</code> on that object.</li> </ol> <p>Let's add some code to go along with this example.</p> <pre><code>public class A {\n    protected final double field1;\n    protected final double field2;\n\n    public A(double field1, double field2) {\n        System.out.println(\"the constructor of A has been called\");\n        this.field1 = field1;\n        this.field2 = field2;\n    }\n\n    public void method1() {\n        System.out.println(\"method 1 of A has been called\");\n    }\n\n    public void method2() {\n        System.out.println(\"method 2 of A has been called\");\n    }\n}\n</code></pre> <p>So A is just a very simple class with two fields and two methods. The only thing here that you haven't seen at all is the word <code>protected</code>. The key word <code>protected</code> describes something which is visible only to a class, classes that inherit from it (its subclasses or child classes), and the other classes in its package. So in this case, all of the <code>protected</code> fields will be accessible by <code>B</code>, (as well as any files in the same folder as <code>A</code>), and nothing else.</p> <pre><code>public class B extends A {\n    public final String bField;\n\n    public B(double field1and2, String bField) {\n        super(field1and2, field1and2);\n        this.bField = bField;\n        System.out.println(\"the constructor of B has been called\");\n    }\n\n    @Override \n    public void method2() {\n        System.out.println(\"method 2 of B has been called\");\n    }\n\n    public double field() {\n        return super.field1;\n    }\n}\n</code></pre> <p>Let's go through this line by line:</p> <pre><code>public class B extends A {\n</code></pre> <p>Adding <code>extends A</code> to the class declaration indicates that <code>B</code> inherits from/is a child class of <code>A</code>.</p> <pre><code>super(field1and2, field1and2);\n</code></pre> <p><code>super</code> is a keyword for a class to refer to its parent class (similar to <code>this</code>, a keyword for a class to refer to itself). So this line is calling the constructor of this class's parent class, <code>A</code>. The constructor of a child class must call the constructor of its parent class. In fact, it has to be the very first thing that the constructor does.</p> <p>If the parent class has a constructor that takes no arguments at all, the child class doesn't have to explicitly call the parent constructor --- it will happen automatically. But if, as in this case, the parent's constructor needs to be given inputs, the child class has to do that explicitly.</p> <p>In this particular case, <code>A</code> takes two double fields as inputs. <code>B</code> takes a double and a String. The double is passed to the constructor of <code>B</code> twice. So if you pass 4 to <code>B</code> as <code>field1and2</code>, it will construct an <code>A</code> with 4 and 4. Remember, <code>B</code> inherits the traits of <code>A</code>, including its protected fields <code>field1</code> and <code>field2</code>, so when <code>B</code> references <code>super.field1</code> or <code>super.field2</code>, those values Bu both be 4.</p> <pre><code>@Override\npublic void method2() {\n</code></pre> <p>The interesting part of this code is the <code>@Override</code> decorator. <code>B</code> inherits the <code>method1</code> and <code>method2</code> of the <code>A</code> class already, so it doesn't need to create its own. With <code>method1</code>, it doesn't make its own. If you have a <code>B</code> object called <code>b</code> and you call <code>b.method1()</code>, the code that will run is the function definition for <code>method1</code> in the <code>A</code> class.</p> <p>But sometimes child classes want to have their own separate implementations for methods, so they override the methods of their parents. That's what <code>B</code> is doing here. It's making it's own definition for <code>method2</code>, so if you were to call <code>b.method2()</code>, instead of the code in <code>A</code> running, the code for <code>method2</code> in <code>B</code> will run.</p> <p>Adding the <code>@Override</code> decorator when you're overriding the method implementation of a parent class isn't technically necessary, but it's very good practice.</p> <p>So, what will happen if we in our main class do the following?</p> <pre><code>A a = new A(12.3, 430);\n</code></pre> <p>We expect that code to call the <code>A</code> constructor, at which point it prints <code>\"the constructor of A has been called\"</code>. So we expect to see that on the console. Try it!</p> <p>What if we do this:</p> <pre><code>B b = new B(-12.31, \"hello\");\n</code></pre> <p>Well, this will call the constructor of <code>B</code>. But the constructor of <code>B</code> also calls the constructor of <code>A</code>! So what will it print? Think it through and then run it to check your logic.</p> <p>How about this?</p> <pre><code>a.method1();\nb.method1();\nb.method2();\n</code></pre> <p>Again, think through what would print, and then check yourself by running it.</p> <p>Now what if we do this:</p> <pre><code>A bInDisguise = new B(1002.013, \"world\");\nbInDisguise.method2();\n</code></pre> <p>This will work because <code>B</code> inherits form <code>A</code>, and therefore <code>B</code> is a type of <code>A</code>. So if we have a variable of type <code>A</code>, the value could actually be a <code>B</code> object and that's okay. So what would that print?</p> <p>Now how about this:</p> <pre><code>System.out.println(b.bField + \" \" + bInDisguise.bField);\n</code></pre> <p>What should that print? Does it work?</p> <p>What will actually happen in this case is that you'll get a compile-time error. Why? Well, even though we know that the value of <code>bInDisguise</code> is a <code>B</code> object, the type of the variable is <code>A</code>, so the computer will always treat it only as an <code>A</code> object. And <code>A</code> doesn't have a <code>bField</code>, so you can't access the <code>bField</code> of <code>bInDisguise</code>, because it's being treated as an <code>A</code>.</p>"},{"location":"projects/intro-to-programming/Java102/#object-class","title":"Object class","text":"<p>You have actually seen <code>@Override</code> in one other context in these guides: <code>toString</code> methods.</p> <p>When we write a <code>toString</code> method for a class, we use the <code>@Override</code> to show that we are overriding the default method implementation. But what are overriding exactly? With <code>B</code>, we were overriding the method defined in <code>A</code>. But our <code>Circle</code> class didn't inherit anything, did it? </p> <p>Well, actually it did. In fact, every single class in Java extends a class called <code>Object</code>.  In the case of <code>Circle</code>, it did not extend any other classes, so its direct parent class was by default <code>Object</code> --- just like if we had written:</p> <pre><code>public class Circle extends Object implements Shape {\n</code></pre> <p>If, like <code>B</code>, a class does have an explicit parent class other than <code>Object</code>, it no longer is directly a child of <code>Object</code> (no class can have multiple parent classes), but it still indirectly inherits from <code>Object</code>. Let's think about this with the <code>A</code> <code>B</code> example. <code>B</code> inherits from <code>A</code>, so it does not directly inherit from <code>Object</code>. But <code>A</code> doesn't inherit from anything explicitly, so it is a direct child of <code>Object</code>. And that means not only that it inherits traits from <code>Object</code>, but also that it passes those traits to <code>B</code>. So, through <code>A</code>, <code>B</code> does indirectly inherit from <code>Object</code>.</p> <p>And what exactly do all these classes inherit from <code>Object</code>? Well, they inherit lots of methods that are useful for everything to have. I'm not going to go over all of them, but they include <code>toString</code>, <code>hashCode</code> (look it up if you're interested!), and <code>equals</code> (takes another object as an argument and returns whether they are the same).</p>"},{"location":"projects/intro-to-programming/Java102/#library","title":"Library","text":"<p>Let's say we're building a system to keep track of item checkouts at a library. We're going to make this incredibly simple (unrealistically so): Each item will store whether or not it has been checked out, and have a method to check the item out and to return it. Each item will also have a method to check if it is available.</p> <p>We're going to have two main types of items: books and DVDs. And there will be a class for each of these types of items.</p> <p>We'll have a <code>LibraryItem</code> that will be the parent class to <code>Book</code> and <code>DVD</code>.</p> <pre><code>public class LibraryItem {\n    public final String title;\n    public final String itemId;\n\n    protected boolean isCheckedOut = false;\n\n    public LibraryItem(String title, String itemId) {\n        this.title = title;\n        this.itemId = itemId;\n    }\n\n    public boolean available() {\n        return !isCheckedOut;\n    }\n\n    public void checkOut() {\n        isCheckedOut = true;\n    }\n\n    public void returnItem() {\n        isCheckedOut = false;\n    }\n}\n</code></pre> <pre><code>public class Book extends LibraryItem {\n    public final String author;\n    public final int pageCount;\n\n    public Book(String title, String itemId, String author, int pageCount) {\n        super(title, itemId);\n        this.author = author;\n        this.pageCount = pageCount;\n    }\n\n    @Override\n    public String toString() {\n        return \"Book: \" + title + \" by \" + author + \", \" + \n                pageCount + \" pages\";\n    }\n}\n</code></pre> <pre><code>public class DVD extends LibraryItem {\n    public final double runtime;\n\n    public DVD(String title, String itemId, double runtime) {\n        super(title, itemId);\n        this.runtime = runtime;\n    }\n\n    @Override\n    public String toString() {\n        return \"DVD: \" + title + \", Runtime: \" + runtime + \" minutes\";\n    }\n}\n</code></pre> <p>Read through this example carefully until you understand what's happening, and then complete the practice problems.</p>"},{"location":"projects/intro-to-programming/Java102/#practice-returnall","title":"Practice: returnAll","text":"<p>Make a static method in <code>Main</code> that takes an array of <code>LibraryItem</code> objects and returns them all to the library.</p> <pre><code>public static void returnAll(LibraryItem[] items) {\n</code></pre> <p>Test your method when you're done!</p>"},{"location":"projects/intro-to-programming/Java102/#practice-availableitems","title":"Practice: availableItems","text":"<p>Make a static method in <code>Main</code> that takes an array of <code>LibraryItem</code> objects and outputs an <code>ArrayList</code> of <code>LibraryItem</code> objects with all of the available items from the input array.</p> <pre><code>public static ArrayList&lt;LibraryItem&gt; availableItems(LibraryItem[] items) {\n</code></pre>"},{"location":"projects/intro-to-programming/Java102/#glossary","title":"Glossary","text":"word/phrase meaning field A variable belonging to an object or class. method A function belonging to an object or class."},{"location":"projects/intro-to-programming/Programming101/","title":"Programming 101","text":""},{"location":"projects/intro-to-programming/Programming101/#introduction","title":"Introduction","text":""},{"location":"projects/intro-to-programming/Programming101/#is-this-for-me","title":"Is this for me?","text":"<p>This tutorial has no prerequisites! It's written with the expectation that most of you have taken algebra 1, but if you haven't that shouldn't be a problem.</p> <p>As for whether you should skip this tutorial, look at the topics listed in Goals. If you are comfortable with all of them (language doesn't matter) you can probably skip this. If you're comfortable with some but not all of the concepts, feel free to skip whatever you already know. If there's anything that you've learned already but you're not 100% sure you remember or have a good grasp on, you're highly encouraged to review it here.</p>"},{"location":"projects/intro-to-programming/Programming101/#goals","title":"Goals","text":"<p>Familiarity with the following topics:</p> <ul> <li>arithmetic, logical, and comparison operations:<ul> <li>/ + - * </li> <li>modulo (%)</li> <li>== &gt; &lt;</li> <li>and or not</li> </ul> </li> <li>variables<ul> <li>scope</li> </ul> </li> <li>basic data types<ul> <li>integers</li> <li>doubles</li> <li>booleans</li> <li>strings</li> <li>lists/arrays</li> </ul> </li> <li>loops<ul> <li>while loops</li> <li>for each loops</li> </ul> </li> <li>functions</li> <li>if statements</li> </ul>"},{"location":"projects/intro-to-programming/Programming101/#materials","title":"Materials","text":"<p>All you need for this is a pen and paper.</p> <p>I know many of you will read this, and then proceed to use your computers for everything anyway. But, for this tutorial, a computer will not help you. You will not be running any code. If you really want, you could write in a code block in google docs, but if possible, it is straightforwardly better in this case to be writing with your hand on paper or a tablet. You can write your code, any calculations you want to do, your thoughts, charts to work through loops, etc.</p>"},{"location":"projects/intro-to-programming/Programming101/#best-practices","title":"Best practices","text":"<p>As always, follow the general best practices.</p> <p>One additional best practice for this tutorial:</p> <p>Do all of the practice problems (unless you're confident that you know exactly how to do it and you think it's a waste of your time). Check your work. If you're ever not 100% sure that you did a problem right, ask someone to check for you.</p>"},{"location":"projects/intro-to-programming/Programming101/#pseudocode","title":"Pseudocode","text":"<p>This tutorial uses pseudocode. In other words, instead of using a real language that you can run on a computer, we're going to be using a made up language.</p> <p>The made up language is going to be very generic and simple. Much of the syntax will resemble Java, since that is the language that we use for robotics. (There will also be a strong resemblance to Python)</p> <p>The nice thing about pseudocode, as opposed to code that you run on computers, is that if you don't use quite the right syntax or formatting, that's fine, as long as what you're trying to do is clear.</p>"},{"location":"projects/intro-to-programming/Programming101/#what-is-code","title":"What is code?","text":"<p>To over-simplify, code is an input or set of instructions that a computer evaluates. For our purposes, that input is in the form of text.</p>"},{"location":"projects/intro-to-programming/Programming101/#comments","title":"Comments","text":"<p>Comments allow us to include commentary in our code, and let the computer know that we're writing text for people to read, not code for it to run. Generally, we use comments to add explanations about our code.</p> <p>In this pseudocode language (and also in Java), you can comment lines out using <code>//</code>, so any line that starts with two slashes is a comment.</p> <pre><code>// this is a comment\n</code></pre>"},{"location":"projects/intro-to-programming/Programming101/#operations","title":"Operations","text":"<p>One of the very simplest things that you can do with code is basic mathematical operations.</p>"},{"location":"projects/intro-to-programming/Programming101/#arithmetic-operators","title":"Arithmetic Operators","text":"<p>Arithmetic operations are probably the ones that you are most familiar with. They are used to manipulate numbers. These are the basic arithmetic operators:</p> name symbol example plus <code>+</code> <code>5 + 9</code> \u2192 <code>14</code> minus <code>-</code> <code>8 - 4</code> \u2192 <code>4</code> times <code>*</code> <code>8 * 2</code> \u2192 <code>16</code> divided by <code>/</code> <code>20 / 4</code> \u2192 <code>5</code> modulo <code>%</code> <code>5 % 2</code> \u2192 <code>1</code> <p>Most of these should be self explanatory. The exception to that is the modulo operator.</p>"},{"location":"projects/intro-to-programming/Programming101/#modulus","title":"Modulus","text":"<p>Modulus essentially means remainder. So <code>a % b</code> evaluates to the remainder when you divide $a$ by $b$.</p> <p>Generally, modulus is done with non-negative integers only.</p> <p>Let's look at what we get when we take every integer $n$ from $0$ to $10$, and calculate $n \\space \\% \\space 2$:</p> n n % 2 $0$ $0$ $1$ $1$ $2$ $0$ $3$ $1$ $4$ $0$ $5$ $1$ $6$ $0$ $7$ $1$ $8$ $0$ $9$ $1$ <p>A couple of things to note about this:</p> <ol> <li>The only two possible values for <code>n % 2</code> are $0$ and $1$.<ol> <li>General conclusion: For all non-negative integers $n$ and $a$, <code>n % a</code> will always evaluate to a non-negative integer between $0$ and $a$.</li> </ol> </li> <li>For all even values of $n$, <code>n % 2</code> evaluates to $0$. For all odd values of $n$, <code>n % 2</code> evaluates to $1$.<ol> <li>General conclusion: Iff <code>n % a</code> evaluates to $0$, then $n$ is divisible by $a$.</li> </ol> </li> </ol> <p>Take a second to think about those properties until they really make sense.</p>"},{"location":"projects/intro-to-programming/Programming101/#comparison-operators","title":"Comparison Operators","text":"<p>Comparison operators compare values and return booleans. You should be familiar with most of these operations:</p> name symbol example equals <code>==</code> <code>5 == 5</code> \u2192 <code>true</code> greater than <code>&gt;</code> <code>8 &gt; 8</code> \u2192 <code>false</code> less than <code>&lt;</code> <code>8 &lt; 10</code> \u2192 <code>true</code> greater than or equals <code>&gt;=</code> <code>8 &gt;= 8</code> \u2192 <code>true</code> less than or equals <code>&lt;=</code> <code>8 &lt;= 5</code> \u2192 <code>false</code> not equals <code>!=</code> <code>5 != 5</code> \u2192 <code>false</code> ## Logical Operators <p>Logical operations transform booleans into other booleans (help). You should be very familiar with all of these words in english, but may not be used to using them in this context.</p> operator symbol examples and <code>&amp;&amp;</code> <code>true &amp;&amp; true</code> \u2192 <code>true</code><code>true &amp;&amp; false</code> \u2192 <code>false</code><code>false &amp;&amp; false</code> \u2192 <code>false</code> or <code>||</code> <code>true \\|\\| true</code> \u2192 <code>true</code><code>true \\|\\| false</code> \u2192 <code>true</code><code>false \\|\\| false</code> \u2192 <code>false</code> not <code>!</code> <code>!true</code> \u2192 <code>false</code><code>!false</code> \u2192 <code>true</code> ## Practice problems <p>Calculate what each of the following code expressions evaluates to (calculators allowed):</p> <ol> <li><code>((10 + 4) - 8) % 2</code></li> <li><code>(11 &lt; 11) || (23 % 2 == 1)</code></li> <li><code>(14 - 11) * 5 % 6</code></li> <li><code>(11 % 4 / 2 &lt;= 1) &amp;&amp; (17 % 2 != 0)</code></li> </ol>"},{"location":"projects/intro-to-programming/Programming101/#variables","title":"Variables","text":"<p>Variables in programming are a pretty similar concept to variables in math.</p> <p>Essentially, a variable is a name attached to a value. Here's the basic syntax:</p> <pre><code>var name = value\n</code></pre> <p>So let's say we have the following line:</p> <pre><code>var x = 5\n</code></pre> <p>Now we have taken a value, $5$, and attached it to the name $x$.</p> <p>if we were to use $x$ in an expression, it would evaluate to $5$. For example: <code>x + 2</code> \u2192 <code>7</code></p> <p>Variables can have values that aren't numbers as well. For instance:</p> <pre><code>var y = true\n</code></pre> <p><code>!y</code> \u2192 <code>false</code></p>"},{"location":"projects/intro-to-programming/Programming101/#functions","title":"Functions","text":"<p>In math, functions are often defined as a mapping between inputs and outputs, where every input has a single output. To some extent, that definition works for functions in programming as well.</p> <p>You can also think of a function like a black box. You feed it some input through a slot, and it spits something out of a slot on the other side. There's some mechanism inside of the box that converts from input to output.</p> <p></p> <p>Here's the general structure of a function definition:</p> <pre><code>def functionName(var input) {\n    // code\n    return output\n}\n</code></pre>"},{"location":"projects/intro-to-programming/Programming101/#example-f","title":"Example: f","text":"<p>Let's take a simple function that you might see in math, and write it in this format. The function we're going to use is: $f(x) = 2x$</p> <p>Okay so here's how we'd write that:</p> <pre><code>def f(var x) {\n    return 2.0 * x\n}\n</code></pre> <p>So the name of this function is <code>f</code>, it's input is <code>x</code>, and its output is <code>2 * x</code>.</p> <p>Now that we have this function defined, we can call it on different values of <code>x</code>, or in other words, we can give the function an input and get an output. So, let's say we wanted to call <code>f</code> on the value $5$.3, here's what would happen: <code>f(5.3)</code> \u2192 <code>10.6</code></p>"},{"location":"projects/intro-to-programming/Programming101/#example-iseven","title":"Example: isEven","text":"<p>In the previous example, both the input and output to our function were numbers. For this example, the input is going to be an integer and the output will be a boolean!</p> <p></p> <p>More specifically, we're going to write a function that takes in an integer and returns whether or not that integer is even (or divisible by $2$).</p> <pre><code>def isEven(var n) {\n    return n % 2 == 0\n}\n</code></pre> <p>Now, let's call our function on a few values and see what the output is:</p> <p><code>isEven(4)</code> \u2192 <code>true</code></p> <p><code>isEven(11)</code> \u2192 <code>false</code></p> <p><code>isEven(0)</code> \u2192 <code>true</code></p>"},{"location":"projects/intro-to-programming/Programming101/#example-xor","title":"Example: xor","text":"<p>Generally, when we talk about <code>or</code> in math and programming, we mean and/or. In other words, <code>or</code> is true if at least one of the arguments passed to it is true. But there's also either/or (generally called <code>xor</code>), which is true if exactly one of the inputs is true. We're going to write an <code>xor</code> function, that will take two booleans as inputs and return whether exactly one is true.</p> <p>This is the first time we're going to see that functions can have multiple inputs (this is true in math as well, although it may not be something you've run into yet). The black box analogy still works, the box just has multiple slots for inputs.</p> <p></p> <p>Here's <code>xor</code>:</p> <pre><code>def xor(var a, var b) {\n    return (a &amp;&amp; (!b)) || (b &amp;&amp; (!a))\n}\n</code></pre> <p>Read through and try to understand the return statement. Essentially, <code>xor</code> returns true in two situations: <code>a</code> and <code>!b</code> are both true (<code>a</code> is true and <code>b</code> is false), or <code>b</code> and <code>!a</code> are both true (<code>b</code> is true and <code>a</code> is false). Let's look at a few examples:</p> <p><code>xor(true, false)</code> \u2192 <code>true</code></p> <p><code>xor(false, true)</code> \u2192 <code>true</code></p> <p><code>xor(true, true)</code> \u2192 <code>false</code></p> <p><code>xor(false, false)</code> \u2192 <code>false</code></p>"},{"location":"projects/intro-to-programming/Programming101/#example-applythrice","title":"Example: applyThrice","text":"<p>In some sense, a function is a value, just like a boolean or an integer. Which is to say, you can have a function whose input or output is another function!</p> <p>If you want to go with the black box analogy, a function that takes another function as an input is like a black box with a slot where you feed in a different black box. And the mechanism inside the main black box might feed an input into the little black box, and then do something with the output.</p> <p></p> <p>A function that outputs another function, on the other hand, is like a big black box with a mechanism that builds another black box, and a slot to output that black box that it generates. </p> <p></p> <p>Here is a function that takes a function <code>fun</code>, and applies that function on the value <code>v</code> three times.</p> <pre><code>def applyThrice(var fun, var v) {\n    return fun(fun(fun(v)))\n}\n</code></pre> <p>If <code>applyThrice</code> is a black box here's what it would look like: </p> <ul> <li>There would be two input slots:<ul> <li>A square hole for a little black box (<code>fun</code>)</li> <li>A slot for a slip of paper (<code>v</code>) with a value scribbled on it.</li> </ul> </li> <li>On the inside of the black box:<ul> <li>The little black box that (<code>fun</code>), once fed through the slot, sits in the center of the big box, held in place</li> <li>The slip of paper (<code>v</code>), once fed in, is grasped by a little mechanical arm. Here's what the arm does:<ul> <li>It brings the paper (<code>v</code>) to the little black box (<code>fun</code>), and feeds it into <code>fun</code> as an input. Out the output slot of <code>fun</code> comes another slip of paper with a new value written on it. The mechanical arm grabs the new slip of paper.</li> <li>It takes the new slip of paper and moves it to the input side of <code>fun</code>, and feeds it in through the <code>input</code> slot (just like it did with <code>v</code>). A third slip of paper comes out of the output slot of <code>fun</code> with yet another new value, and the arm grabs it.</li> <li>The arm feeds the third slip of paper to <code>fun</code> as an input! A final slip of paper comes out the output slot of <code>fun</code>, and the mechanical arm grabs it. But this time, it just takes the paper and sends it out the output slot of the main big black box.</li> </ul> </li> </ul> </li> </ul> <p>And remember, all of this is happening inside the big black box. So from the perspective of someone using the function, all that happens is someone slides in a little black box and a slip of paper through the input slots of <code>applyThrice</code>, and then a different slip of paper comes out through the output slot. They don't see the mechanical arm at all.</p> <p>Let's go through an example (f is a function that takes a number and multiplies it by $2$):</p> <p><code>applyThrice(f, 2)</code></p> <p>In this example, <code>fun</code> is <code>f</code>, and <code>v</code> is <code>2</code>. So <code>applyThrice</code> will return <code>f(f(f(2)))</code>.</p> <p><code>f</code> multiplies an input by 2, so <code>f(2)</code> is 4. And <code>f(f(2))</code> is <code>f(4)</code> which is 8. And finally, <code>f(f(f(2)))</code> is <code>f(8)</code> which is 16.</p> <p>So, ultimately, <code>applyThrice(f, 2)</code> \u2192 <code>16</code>.</p>"},{"location":"projects/intro-to-programming/Programming101/#practice-problems","title":"Practice Problems","text":"<ol> <li>Write a function that takes as an input an integer <code>n</code> and returns that integer modulo 4.</li> <li>Write a function called <code>neither</code> that takes in three inputs: a value <code>v</code>, and two functions <code>f</code> and <code>g</code> (both of which return booleans). The <code>neither</code> function should return whether both <code>f</code> and <code>g</code> return <code>false</code> when called with <code>v</code> as an input.</li> </ol>"},{"location":"projects/intro-to-programming/Programming101/#scope","title":"Scope","text":"<p>The scope of a variable is the part of the code where that variable can be referenced. Generally, the scope of a variable <code>v</code> is from when it is defined, to the end of the code block within which it is defined. </p> <p>Code blocks are usually denoted with curly braces. So, for instance, when you define a function, you have a pair of curly braces where the code for the function is written. That is a code block. (Other examples include loops and if statements).</p> <p>When a function takes inputs, variables are defined for each input. The scope of those variables is only inside of the function:</p> <pre><code>// x is not defined yet\ndef foo(var x) {\n    // x is defined\n}\n// x is not in scope, and therefore not defined\n</code></pre> <p>In the code above, if you were to try to reference <code>x</code> outside of the function <code>foo</code>, you would get an error.</p> <p>You could also create a new variable inside <code>foo</code>, and that variable would also go out of scope when the function ended:</p> <pre><code>// x and y are not defined yet\ndef foo(var x) {\n    // x is defined, y is not\n    var y = 3\n    // x and y are both defined and in scope\n}\n// x and y are not in scope, and therefore not defined\n</code></pre> <p>If, however, you defined a variable outside of <code>foo</code>, it would be in scope for the entire file!</p> <pre><code>// x, y, and z is not defined\nvar z = 8\n// z is defined, x and y are not defined\ndef foo(var x) {\n    // x and z are is defined, y is not\n    var y = z + 2\n    // x, y, and z are defined and in scope\n}\n// z is in scope, x and y are not in scope\n</code></pre> <p>Now, let's say we made a new variable inside of <code>foo</code>, and called it <code>z</code>. This is called shadowing. You can create multiple variables with the same name, and have them in different scopes. When you try to refer to the name, you refer to the variable defined most recently. Here's an example:</p> <pre><code>// x and z are not defined\nvar z = 8\n// z is defined as 8, x is not defined\ndef foo(var x) {\n    // x and z are is defined\n    var z = 7\n    // this z is shadowing the one we defined earlier\n    // if we refer to z here we will get 7\n}\n// only the original z remains\n// if we refer to z we will get 8\n</code></pre>"},{"location":"projects/intro-to-programming/Programming101/#mutability","title":"Mutability","text":"<p>An important way that the variables we're talking about differ from mathematical variables, is that in most programming languages, variables are mutable, which is to say, they can be changed. Changing a variable looks similar to defining a variable, except that the word <code>var</code> is not used.</p> <pre><code>// x is undefined\nvar x = 0\n// x is defined as 0\nx = 3\n// x is defined as 3\nx = x + 2\n// x is defined as 5\n</code></pre> <p>Be careful with mutability. Changing values can cause all sorts of bugs, so every time you find yourself mutating a value, think about whether it's necessary, and whether you're messing anything up.</p>"},{"location":"projects/intro-to-programming/Programming101/#data-types","title":"Data Types","text":"<p>There are many different types of values, or formats for storing data.</p>"},{"location":"projects/intro-to-programming/Programming101/#summary","title":"Summary","text":"type description examples integer n/a <code>1</code> double a number with a decimal point <code>1.0</code><code>2.4</code> boolean see glossary <code>true</code> string a collection of characters in quotation marks <code>\"hello world\"</code><code>\"123*&amp;@\"</code> array a collection of values that can be accessed by index <code>[5, 4, 3, 2, 1]</code> ## Arrays <p>Simply put, arrays are ordered collections of values that can be accessed efficiently by index. </p> <p>Note: in many languages (i.e. python) the data types called lists are arrays. Some languages, however, (i.e. scheme) have lists that are not arrays.</p> <p>Here's an example of an array of integers: <code>[1, 2, 3, 4, 5]</code> Actually, let's assign this array to a variable:</p> <pre><code>var l = [1, 2, 3, 4, 5]\n</code></pre> <p>Now, if we wanted to extract a value from <code>l</code>, we could do so by using that value's index. And remember, we index starting from 0.</p> <p><code>l[0]</code> \u2192 <code>1</code> <code>l[4]</code> \u2192 <code>5</code> <code>l[5]</code> does not exist!</p> <p>We can also have arrays with other types of values in them:</p> <pre><code>var stringArr = [\"once\", \"upon\", \"a\", \"time\"]\n</code></pre> <p><code>stringArr[1]</code> \u2192 <code>\"upon\"</code></p>"},{"location":"projects/intro-to-programming/Programming101/#array-mutability","title":"Array Mutability","text":"<p>Like variables, values in arrays can be changed.</p> <pre><code>// l is undefined\nvar l = [1, 2, 3]\n// l is defined as [1, 2, 3]\nl[1] = -1\n// l is defined as [1, -1, 3]\nl[2] = l[1] * l[2]\n// l is defined as [1, -1, -3]\n</code></pre> <p>Also like with variables, be careful when you mutate arrays.</p>"},{"location":"projects/intro-to-programming/Programming101/#practice-problems_1","title":"Practice Problems","text":"<p>Here are some variables that will be used in the problems:</p> <pre><code>var boolArr = [true, false, false, true, false, true]\nvar intArr = [8, -4, 2, 9, -5, 3]\nvar doubleArr = [6.4, 2.0, 9.8787, 0.003]\n</code></pre> <p>Calculate what each of the following code expressions evaluates to:</p> <ol> <li><code>boolArr[3] &amp;&amp; boolArr[1]</code></li> <li><code>boolArr[5] &amp;&amp; (boolArr[2] || (intArr[0] - intArr[2] + intArr[5] == 1))</code></li> <li><code>(intArr[4] * intArr[1]) % intArr[2]</code></li> <li><code>!(doubleArr[2] - doubleArr[3] &lt; doubleArr[0])</code></li> </ol>"},{"location":"projects/intro-to-programming/Programming101/#loops","title":"Loops","text":"<p>Loops allow us to run the same code over and over again. We're going to learn about two different kinds of loops.</p>"},{"location":"projects/intro-to-programming/Programming101/#while-loops","title":"While Loops","text":"<p>With while loops, we can take a chunk of code and say that it should be run repeatedly, as long as some condition is true. </p> <p>Here's the basic structure:</p> <pre><code>while (condition) {\n    // code to run\n}\n</code></pre> <p>For each run of the loop, the computer will first check if the condition is true, and then if it is, it will run the code. Otherwise, the loop will end and the computer will move onto the code after the loop.</p>"},{"location":"projects/intro-to-programming/Programming101/#example-1","title":"Example 1","text":"<p>Here's a simple example:</p> <pre><code>var x = 0\nvar sum = 0\n// this code will run until x is greater than or equal to 4\nwhile (x &lt; 4) {\n    // first, we add the current value of x to our sum\n    sum = sum + x\n    // then, we increase x by 1\n    x = x + 1\n}\n</code></pre> <p>After this loop runs, what is the value of <code>sum</code>?</p> <p>Let's go through this step by step. For each run of the loop, we're going to look at the values of <code>x</code> and <code>sum</code>, figure out whether the condition is true, and then (if the condition is true) we'll see how <code>x</code> and <code>sum</code> change when we run the code inside the loop.</p> sum x condition (x &lt; 4) next sum (sum + x) next x (x + 1) $0$ $0$ $true$ $0$ $1$ $0$ $1$ $true$ $1$ $2$ $1$ $2$ $true$ $3$ $3$ $3$ $3$ $true$ $6$ $4$ $6$ $4$ $false$ n/a n/a <p>So, our final value of <code>sum</code> is $6$! And what does <code>sum</code> represent? Well, we went through every integer <code>x</code> between $0$ and $4$, and for each value we added <code>x</code> to <code>sum</code>. So at the end of the day, <code>sum</code> is the sum of the integers from $0$ to $4$!</p>"},{"location":"projects/intro-to-programming/Programming101/#example-15","title":"Example 1.5","text":"<p>Next, let's take the code we just wrote that found the sum of the integers from $0$ to $4$, and generalize it to make a function called <code>sumBelow</code> that finds the sum of the integers from $0$ to $n$:</p> <pre><code>def sumBelow(var n) {\n    var x = 0\n    var sum = 0\n    // this code will run until x is greater than or equal to n\n    while (x &lt; n) {\n        // first, we add the current value of x to our sum\n        sum = sum + x\n        // then, we increase x by 1\n        x = x + 1\n    }\n    return sum\n}\n</code></pre> <p>Note: <code>x</code>,  and <code>sum</code>, and <code>n</code> are in scope only inside of the function. Each time you call the function, a new value of <code>n</code> is passed in, and new <code>sum</code> and <code>x</code> variables are created.</p> <p>So this is almost exactly the same as the example while loop, except instead of looping until <code>x</code> is greater than or equal to $4$, the loop continues until <code>x</code> is greater than or equal to <code>n</code>, where <code>n</code> is the input to the function. And then at the end, the function returns <code>sum</code>, so the output of the function is <code>sum</code>.</p> <p>If we call <code>sumBelow</code> on $4$, the output will be exactly the same as in Example 1.</p> <p><code>sumBelow(4)</code> \u2192 <code>6</code></p> <p>If, however, we call the function on $5$, we will instead get the sum of all the positive integers below 5.</p> <p><code>sumBelow(5)</code> \u2192 <code>10</code></p> <p>Evaluate what the following calls of <code>sumBelow</code> evaluate to:</p> <p><code>sumBelow(6)</code> \u2192</p> <p><code>sumBelow(3)</code> \u2192</p> <p><code>sumBelow(-1)</code> \u2192</p>"},{"location":"projects/intro-to-programming/Programming101/#example-2","title":"Example 2","text":"<pre><code>var arr = [3, 6, 4, 1]\nvar sum = 0\nvar i = 0\n// this code will run until x is greater than or equal to 4\nwhile (i &lt; 4) {\n    // first, we add the ith value of arr to sum\n    sum = sum + arr[i]\n    // then, we increase i by 1\n    i = i + 1\n}\n</code></pre> <p>What is the value of <code>sum</code> after this loop runs?</p> <p>This example is very similar to the previous one, but the value that we are adding to sum and the variable that we are increasing repeatedly are not the same. Instead, we're essentially using <code>i</code> to loop through each value in the array arr. Let's analyze this loop like we did the last.</p> <code>sum</code> <code>i</code> condition (<code>x &lt; 4</code>) <code>arr[i]</code> next <code>sum</code> (<code>sum + arr[i]</code>) next <code>i</code> (<code>i + 1</code>) $0$ $0$ $true$ $3$ $3$ $1$ $3$ $1$ $true$ $6$ $9$ $2$ $9$ $2$ $true$ $4$ $13$ $3$ $13$ $3$ $true$ $1$ $14$ $4$ $14$ $4$ $false$ n/a n/a n/a <p>So, the final value of <code>sum</code> is $14$. If you go through step by step, what's happening is we're going through and adding each value of <code>arr</code> to <code>sum</code>, so that at the end of the day, <code>sum</code> is the sum of the values in <code>arr</code>.</p>"},{"location":"projects/intro-to-programming/Programming101/#for-each-loops","title":"For Each Loops","text":"<p>For each loops (analogous to for loops in python) allow us to easily loop through the values of an array. Essentially, they are shorthand for what we do in the second while loop example.</p> <p>Here's the format of a for each loop:</p> <pre><code>for (var element : array) {\n    // code to run, where element represents an element in the array\n}\n</code></pre>"},{"location":"projects/intro-to-programming/Programming101/#example-3","title":"Example 3","text":"<p>Let's try to recreate the second while loop example, where we sum up the elements in an array, with a for each loop. Except this time, we'll put it into a function, so we can find the sum of any array:</p> <pre><code>def sumArray(var arr) {\n    var sum = 0\n    for (var val : arr) {\n        sum = sum + val\n    }\n    return sum\n}\n</code></pre> <p>So this loop will run once for each value in <code>arr</code>, and every time in runs, the variable <code>val</code> will refer to a different value in <code>arr</code>. Then, for every run of the loop, <code>val</code> is added to <code>sum</code>. So, just like with our while loop, in the end <code>sum</code> ends up being the sum of the values in <code>arr</code>.</p> <p>Evaluate what the following calls of <code>sumArray</code> evaluate to:</p> <p><code>sumArray([3, 5, 4, 9])</code> \u2192</p> <p><code>sumArray([-7, 6, 0, 2])</code> \u2192</p>"},{"location":"projects/intro-to-programming/Programming101/#example-4","title":"Example 4","text":"<p>Let's try an example using some non-numerical data types:</p> <pre><code>var arr = [2, 6, 4, 1, 0]\nvar allEven = true\nfor (var n : arr) {\n    var nEven = (n % 2 == 0)\n    var allEven = allEven &amp;&amp; nEven\n}\n</code></pre> <p>Side note: <code>nEven</code> is defined inside of the loop. That means that the scope of <code>nEven</code> is inside of the loop. So each time the code in the loop is run, a new variable named <code>nEven</code> is created, and then every time the loop ends, that variable is destroyed. And <code>nEven</code> does not exist outside of the loop.</p> <p>Ok so, what is <code>allEven</code> at the end of the loop?</p> <p>This loop goes through each value <code>n</code> in <code>arr</code>. For every <code>n</code>, it first find whether <code>n</code> is even and stores that in <code>nEven</code>, and then changes <code>allEven</code> to be <code>allEven &amp;&amp; nEven</code>. The goal here is that at each step, <code>allEven</code> will be true if the current value of <code>n</code> is even and all of the previous values of <code>n</code> were even.</p> <p>Let's use a chart to analyze this. I'll do the first row, and you can fill in the rest.</p> <code>allEven</code> <code>n</code> <code>nEven</code> next <code>allEven</code> (<code>allEven &amp;&amp; nEven</code>) $true$ $2$ $true$ $true$ $6$ $4$ $1$ $0$ ### Example 4.5 <p>In the last example, we used a loop to check that every value in an array is even (or divisible by 2). Let's generalize that to write a function that takes for inputs an array <code>arr</code> and an integer <code>fact</code>, and returns whether every value in <code>arr</code> is divisible by <code>fact</code>.</p> <pre><code>def allDivisible(var arr, var fact) {\n    var divisible = true\n    for (var n : arr) {\n        var nDivisible = (n % fact == 0)\n        divisible = divisible &amp;&amp; nDivisible\n    }\n    return divisible\n}\n</code></pre> <p>Calculate what the following calls of <code>allDivisible</code> evaluate to:</p> <p><code>allDivisible([3, 6, 0, 9], 3)</code> \u2192</p> <p><code>allDivisible([100, 225, 802, 445], 5)</code> \u2192</p> <p><code>allDivisible([28, 8, 16, 2, 4004, 20], 4)</code> \u2192</p> <p>Important note: when you have a function that takes an array as an input, you are technically capable of changing the values in that array. If you do, that is a side effect. Be VERY CAREFUL about doing that -- it can cause errors very very easily. So don't change the values in an array passed to a function unless it's absolutely necessary. It's almost always better to create a new array instead.**</p>"},{"location":"projects/intro-to-programming/Programming101/#example-5","title":"Example 5","text":"<p>Let's look at an example of a function that takes an array <code>arr</code> and a function <code>fun</code>, and uses a for each loop to return the sum of the outputs when each value in <code>arr</code> is plugged into <code>fun</code>.</p> <pre><code>def sumOutputs(var arr, var fun) {\n    var sum = 0.0\n    for (var n : arr) {\n        sum = sum + fun(n)\n    }\n    return sum\n}\n</code></pre> <p>Now let's say we have the following functions <code>g</code> and <code>h</code>:</p> <pre><code>def g(var x) {\n    return x * x\n}\n\ndef h(var x) {\n    return 0.5 * x\n}\n</code></pre> <p>Evaluate the following calls to <code>sumOutputs</code> (calculators allowed):</p> <p><code>sumOutputs([2.0, 1.2, 4.3, 10.2], g)</code></p> <p><code>sumOutputs([2.0, 1.2, 4.3, 10.2], h)</code></p>"},{"location":"projects/intro-to-programming/Programming101/#practice-problems_2","title":"Practice Problems","text":"<ol> <li>Evaluate the function calls at the end of the sumBelow example</li> <li>Evaluate the function calls at the end of the sumArray example</li> <li>Fill in the chart in the second for each loop example</li> <li>Evaluate the function calls at the end of the sumOutputs example</li> <li>Use a while loop to sum up the first 15 multiples of 3. You should start with a variable <code>sum</code> (and whatever other variables you think you need), and in the end, <code>sum</code> should hold your answer.</li> <li>Write a function that takes as an input an array of integers <code>arr</code> and returns the sum of all of the values modulo 4 (hint: you can use the <code>sumOutputs</code> function)</li> <li>Write a function that takes an array <code>arr</code> and uses a for each loop to determine if any of the values in an array <code>arr</code> are divisible by 7.</li> </ol>"},{"location":"projects/intro-to-programming/Programming101/#side-effects","title":"Side Effects","text":"<p>Thus far, we've been thinking of functions as having an input (or multiple inputs) and an output. It turns out, however, that we can also make functions without inputs or outputs. This is useful mostly in situations when we are dealing with side effects. Any time that our code interacts with/effects something outside of itself, that's a side effect.</p> <p>With the black box analogy, you can think of side effects as there being a remote control inside of a black box that it can use to control other things.</p> <p></p> <p>So, for instance, if we had a motor that our code was controlling, that would be a side effect.</p> <p>Let's go a little farther with that example. Let's say we have a motor <code>motor</code>. The motor has a sensor that finds its speed, and if we want to ping that sensor and get the speed, we call <code>speed(motor)</code>. If we want to set the speed of the motor, we call <code>set(motor, desiredSpeed)</code>. Both of those actions have side effects.</p> <p>Now, let's say we have four motors, stored in an array like this:</p> <pre><code>var motors = [motor1, motor2, motor3, motor4]\n</code></pre> <p>We want to write a function that someone can call to find the average of the speeds of those motors. In that case, we don't actually want any input. We just want to give an output. Instead of a slot for inputs, the black box will just have a button that we can press to start it. </p> <p></p> <p>The function would look something like this (see sumOutputs):</p> <pre><code>def avgSpeed() {\n    return sumOutputs(motors, speed) / 4\n}\n</code></pre> <p>We also want to write a function that sets the speed of all of the motors to the same value. That function isn't going to have an output, because we don't need to get any information from it. Instead, we want it to do something. We want a black box without an output slot, that just swallows our inputs and presses some buttons on a remote control. </p> <p></p> <p>So we won't return anything.</p> <pre><code>def setAllMotors(var desiredSpeed) {\n    for (var motor : motors) {\n        set(motor, desiredSpeed)\n    }\n}\n</code></pre> <p>Now let's say we want to write a function that stops all of the motors. That doesn't need an input or an output. We just want to be able to run the same code again and again by calling a function. It's a black box with no openings at all, just a button.</p> <p></p> <pre><code>def stopMotors() {\n    setAllMotors(0)\n}\n</code></pre>"},{"location":"projects/intro-to-programming/Programming101/#if-statements","title":"If Statements","text":"<p>If statements allow us to decide whether to run code based on conditions.</p> <p>Here's the general structure:</p> <pre><code>if (condition) {\n    // code to run if condition is true\n}\n</code></pre> <p>There can also be else statements, with code to run if the condition is false:</p> <pre><code>if (condition) {\n    // code to run if condition is true\n}\nelse {\n    // code to run if condition is false\n}\n</code></pre>"},{"location":"projects/intro-to-programming/Programming101/#example-sumeven","title":"Example: sumEven","text":"<p>We're going to use an if statement to add all of the values in an array that are even:</p> <pre><code>def sumEven(var arr) {\n    var sum = 0\n    for (var n : arr) {\n        if (n % 2 == 0) {\n            sum = sum + n\n        }\n    }\n    return sum\n}\n</code></pre> <p>Evaluate the following call to <code>sumEven</code> (calculators allowed):</p> <p><code>sumEven([3, 620, 4, 135, 1102])</code> \u2192</p> <p>Now, with this example, you actually could write a version of this function that doesn't use an if statement at all, (although the version here gets complicated if <code>arr</code> has negative elements):</p> <pre><code>def sumEvenNoIf(var arr) {\n    var sum = 0\n    for (var n : arr) {\n        var nMultiplier = 1 - n % 2 \n        sum = sum + n * nMultiplier\n    }\n    return n\n}\n</code></pre> <p>See if you can figure out what's going on there! Maybe work through a few examples.</p>"},{"location":"projects/intro-to-programming/Programming101/#example-collatz-conjecture","title":"Example: Collatz Conjecture","text":"<p>The Collatz Conjecture is a very famous unsolved math problem. I suggest you watch the video I linked (or at least the beginning), but if you don't want to, I'll give you a summary of the problem.</p> <p>Let's say you take an integer $n$ and repeatedly apply the following procedure:</p> <ul> <li>If $n$ is odd, you multiply $n$ by $3$ and add $1$.</li> <li>If $n$ is even, you divide $n$ by $2$ So you do that again and again, each time plugging in the value you got from the previous time, until you get into a loop (you keep hitting the same numbers again and again).</li> </ul> <p>The Collatz Conjecture is that no matter what number you start with, you will always end up in the same loop: 4 2 1 - $4$ \u2192 $4 / 2 = 2$ \u2192 $2 / 2 = 1$ \u2192 $1 \\times 3 + 1 = 4$ \u2192 $4 / 2 = 2$ \u2192 etc</p> <p>The Collatz Conjecture is super simple, but it has never been proven or disproven, which is why it's so famous.</p> <p>Anyway, we will not be making any attempt to solve the Collatz Conjecture, but we will be writing a function that calculates how long it takes for a value to get back to $1$ and into the $4$ $2$ $1$ loop!</p> <pre><code>def collatz(var start) {\n    var n = start\n    var count = 0\n    while (n != 1) {\n        if (n % 2 == 1) {\n            n = n * 3 + 1\n        }\n        else {\n            n = n / 2\n        }\n    }\n    return count\n}\n</code></pre>"},{"location":"projects/intro-to-programming/Programming101/#practice-problems_3","title":"Practice Problems","text":"<ol> <li>Write a function called <code>max</code> that takes two doubles and returns whichever one is larger<ul> <li>Write a function called <code>maxArray</code> that takes an array and returns the biggest number in the array. Use <code>max</code>. If statements should not be necessary.</li> </ul> </li> <li>Write a function that called <code>sumIf</code> that takes an array <code>arr</code> and a function <code>f</code> that returns a boolean, and returns the sum of all the values <code>v</code> in <code>arr</code> for which <code>f(v)</code> is true (this will be similar to sumEven).</li> </ol>"},{"location":"projects/intro-to-programming/Programming101/#glossary","title":"Glossary","text":"word/phrase meaning between $\\alpha$  and $\\beta$ by default, ranges are inclusive of the minimum, and exclusive of the maximum. So, if $x$ is between $\\alpha$  and $\\beta$, then $\\alpha &lt;= x &lt; \\beta$. iff if and only if boolean a value that is either $true$ or $false$ index an integer that indicates the location of a value in a set. In programming, we index starting from 0, so the first value in a set has index 0, and the 2nd has index 1, etc. mutable can be changed"},{"location":"reference-sheets/","title":"About","text":"<p>These reference sheets allow you to add new stuff to your basic robot repository. There is no specific order you should go through these, but you should keep a few things in mind when looking through these:</p> <p>These guides will help you get setup for harder tasks</p> <ul> <li>Command Line Navigation</li> <li>Environment Setup</li> <li>File Structure</li> <li>Git Guide</li> <li>Trig Guide</li> </ul> <p>In terms of the other guides, you can use them to add to your project whenever you feel ready. It is important to note, however, that...</p> <ul> <li>Advanced Java should be prioritized so that you can grasp higher level concepts like Command Based Programming</li> <li>Sensors will help you get a better understanding of what information you can get from the robot</li> <li>Simulation is a very cool way to visualize what each part of your robot is doing, especially with a drivetrain. This often goes in hand with Telemetry to help you get information needed for simulation and visualization.<ul> <li></li> </ul> </li> <li>Control Theory is a very advanced concept with a lot of facets. It's also primarily used for either drivetrains or more complex mechanisms like an elevator or an arm. Be warned!</li> </ul>"},{"location":"reference-sheets/AdvancedJava/","title":"Advanced Java","text":""},{"location":"reference-sheets/AdvancedJava/#contents","title":"Contents","text":"<ul> <li>Enums</li> <li>Records</li> <li>Lambdas &amp; Functional Interfaces</li> <li>Switch Expressions</li> </ul>"},{"location":"reference-sheets/AdvancedJava/#enums","title":"Enums","text":"<p>coming soon!</p>"},{"location":"reference-sheets/AdvancedJava/#records","title":"Records","text":"<p>coming soon!</p>"},{"location":"reference-sheets/AdvancedJava/#lambdas-functional-interfaces","title":"Lambdas &amp; Functional Interfaces","text":""},{"location":"reference-sheets/AdvancedJava/#functional-interfaces","title":"Functional Interfaces","text":""},{"location":"reference-sheets/AdvancedJava/#example-filtering-a-list","title":"Example: filtering a list","text":"<p>Often, we want to be able to pass around functions like they are objects. For instance, maybe we want to write a static method that filters a list based on some condition. So we want to take a <code>List</code> with elements of type <code>T</code> (a generic type), and some condition, and then return a new <code>List</code> of type <code>T</code> that only includes the elements of our first list that meet the condition.</p> <p>So, what would the type of our condition be? Well, we need to be able to check each individual element of the list. So it would make sense if our condition was actually a function, that takes in something of type <code>T</code> and returns a boolean.</p> <p>For instance, let's say we had a function <code>isEven</code> that takes in an integer and returns whether it is even, and we wanted to filter a list of integers <code>intList</code> so that we'd only have the even numbers. We would like to be able to accomplish that by doing something resembling the following:</p> <pre><code>List&lt;Integer&gt; filtered = filter(intList, isEven);\n</code></pre> <p>And then our function <code>filter</code> should go through each element in <code>intList</code>, feed it into <code>isEven</code>, and if the result is <code>true</code> it add it to a new filtered list.</p> <p>But if we want to do that, to pass <code>isEven</code> around in Java, it needs to have a type, which means it needs to be an instance of some class. Think about it: if we try to write the header for our filter method, we need to have a type for <code>condition</code>:</p> <pre><code>public static &lt;T&gt; List&lt;T&gt; filter(List&lt;T&gt; l, ___ condition);\n</code></pre> <p>Side note: having the \\&lt;T&gt; before the return type of the method is the notation for declaring a generic type to be used in a method rather than an entire class.</p> <p>So let's think about what type <code>condition</code> should be. All that really matters is that it is a function with an input of type <code>T</code> and an output of type <code>boolean</code>. So we want to have some simple way to specify that.</p> <p>That's where functional interfaces come in!  A functional interfaces is an interface that specifies one (abstract) method only. Remember, interfaces have methods that they define the shape of but don't actually implement. And then everything that uses an interface has to have implementations for all of the methods specified in the interface.</p> <p>With functional interfaces, there is just one method that needs to be overridden/implemented. So for instance, there is a functional interface called <code>Function</code> which has two generic types, <code>T</code> and <code>R</code>.</p> <pre><code>@FunctionalInterface\npublic interface Function&lt;T, R&gt; {\n\n}\n</code></pre> <p>(The annotation <code>@FunctionalInterface</code> above the class header tells Java to treat the class as a functional interface.)</p> <p><code>Function&lt;T, R&gt;</code> is meant to represent the type of a function that takes an input of type <code>T</code> and has an output of type <code>R</code>. So the single method inside of the <code>Function</code> interface is called <code>apply</code>, and does just that:</p> <pre><code>@FunctionalInterface\npublic interface Function&lt;T, R&gt; {\n    R apply(T t);\n}\n</code></pre> <p>The <code>apply</code> method has an input of type <code>T</code> and an output of type <code>R</code>. So if you have a variable <code>condition</code> of type <code>Function&lt;Integer, Boolean&gt;</code>, you can call <code>condition.apply(5)</code> and get a boolean in return.</p> <p>That is how we can write our <code>filter</code> method (you can also use the <code>Predicate</code> interface)!</p> <pre><code>public static &lt;T&gt; List&lt;T&gt; filter(List&lt;T&gt; l, Function&lt;T, Boolean&gt; condition) {\n    ArrayList&lt;T&gt; filtered = new ArrayList&lt;&gt;();\n    for (T element : l) {\n        if (condition.apply(element)) {\n            filtered.add(element);\n        }\n    }\n    return filtered;\n}\n</code></pre> <p>But then, if we want to call <code>filter</code> with <code>isEven</code>, do we need to make a whole new class that implements <code>Function&lt;Integer, Boolean&gt;</code> and has an <code>apply</code> function that calls <code>isEven</code>? That seems like too much work.</p> <p>But that's actually the special thing about functional interfaces - we don't have to do that at all. If we just pass in our function, <code>isEven</code>, using a particular notation, Java will basically make that class for us.</p> <p>The notation for referring to methods as functional interfaces is:</p> <pre><code>// for static methods\nClass::method\n// for non-static methoods\nobject::method\n</code></pre> <p>In this case, <code>isEven</code> is definitely a static method. Let's say it's inside of a class called <code>Foo</code>, here's how we would filter our list:</p> <pre><code>List&lt;Integer&gt; filtered = filter(intList, Foo::isEven);\n</code></pre>"},{"location":"reference-sheets/AdvancedJava/#other-functional-interfaces","title":"Other functional interfaces","text":"<p>Here are some other useful functional interfaces to know:</p> <ul> <li><code>Runnable</code><ul> <li>method: <code>void run()</code></li> <li>no inputs, no outputs</li> </ul> </li> <li><code>Supplier&lt;T&gt;</code><ul> <li>method: <code>T get()</code></li> <li>no inputs, output of type <code>T</code></li> </ul> </li> <li><code>Consumer&lt;T&gt;</code><ul> <li>method: <code>void accept(T t)</code></li> <li>input of type <code>T</code>, no output</li> </ul> </li> <li><code>BooleanSupplier</code><ul> <li>method: <code>boolean getAsBoolean()</code></li> <li>works like a <code>Supplier&lt;Boolean&gt;</code>, but more efficient</li> </ul> </li> <li><code>DoubleSupplier</code><ul> <li>method: <code>double getAsDouble()</code></li> <li>works like a <code>Supplier&lt;Double&gt;</code>, but more efficient</li> </ul> </li> </ul> <p>There are many others as well, and if you ever need a functional interface that doesn't exist, you can make your own!</p>"},{"location":"reference-sheets/AdvancedJava/#lambdas","title":"Lambdas","text":"<p>We've talked about functional interfaces, and how we can use them to pass around methods that belong to a class or object. Now we're going to talk about a different way of generating instances of functional interfaces.</p> <p>A lambda expression is a concept in functional programming (you don't need to know what that means) that refers to an anonymous function, or a function without a name. In Java, lambdas are essentially a notation for creating implementations of functional interfaces.</p> <p>Here's the basic, oversimplified notation:</p> <pre><code>inputs -&gt; output\n</code></pre> <p>So, if we wanted to filter a list to only have even numbers, but didn't have (or want to write) a whole separate <code>isEven</code> method, we could do the following instead:</p> <pre><code>List&lt;Integer&gt; filtered = filter(intList, i -&gt; i % 2 == 0);\n</code></pre> <p>Java will take that lambda expression that I wrote, and turn it into an instance of the <code>Function</code> interface, where the apply function takes an integer <code>i</code> and returns <code>i % 2 == 0</code>.</p> <p>If you want a lambda expression that takes no inputs and returns something (i.e. an implementation of <code>Supplier</code>), you would use this notation:</p> <pre><code>() -&gt; output\n</code></pre> <p>If you want a lambda expression that takes multiple inputs (i.e. an implementation of <code>BiFunction</code>), you would use this notation:</p> <pre><code>(input1, input2) -&gt; output\n</code></pre> <p>If your lambda expression isn't supposed to have an output, but is instead supposed to do something, you use the same notation. So for instance, if you are writing a <code>Runnable</code> that takes no inputs and prints <code>Hello World</code>, it would look like this:</p> <pre><code>() -&gt; System.out.println(\"Hello World\")\n</code></pre> <p>If your lambda expression has multiple lines, you use curly braces. So for instance, here's how you'd write a <code>Function&lt;Integer, Integer&gt;</code> that prints the integer input and then returns that integer times two:</p> <pre><code>i -&gt; { \n        System.out.println(i);\n        return i * 2; \n      }\n</code></pre> <p>Note that when you have curly braces, if your lambda has an output you need to write <code>return</code>!</p>"},{"location":"reference-sheets/AdvancedJava/#switch-expressions","title":"Switch Expressions","text":"<p>coming soon!</p>"},{"location":"reference-sheets/CommandBased/","title":"Command Based Programming","text":""},{"location":"reference-sheets/CommandBased/#the-command-based-paradigm","title":"The Command-based Paradigm","text":"<p>For its wide capabilities and ease of use, we use WPILib's command-based paradigm to compartmentalize and control the different parts of our robot.</p> <p>Subsystems represent independent parts of the robot and their hardware, which work together to achieve a desired action.</p> <p>Commands safely direct those subsystems to perform actions in a wide suite of ways. They can be chained together in parallel or made sequential to one another, among other handy functions.</p> <p>These are general definitions; there's actually a fair bit of nuance to both.</p>"},{"location":"reference-sheets/CommandBased/#subsystems","title":"Subsystems","text":"<p>For our purposes, all subsystems extend WPILib's <code>SubsystemBase</code>. It provides command safety functionality, its inherited periodic methods, and default commands. See in greater detail on the official WPILib docs.</p> <p>More specifically, subsystems can be defined as collections of hardware that are not dependent on others to function well. As a result, multiple different mechanisms can be part of a single subsystem.</p> <p>For instance, imagine a double-jointed arm. When the joint connected to the main pivot moves, the position of the arm stemming from the joint will change, making their movement and position dependent on one another.</p> <p>As a result, it is good practice to contain both mechanisms in the same subsystem so that they have easy access to each other's information, which makes accounting for relative position easier. This limits code duplication and makes working with the whole simpler.</p>"},{"location":"reference-sheets/CommandBased/#commands","title":"Commands","text":"<p>Commands represent robot actions with the hardware. They should be used for actions that may interfere with how the robot is run (i.e actual robot movement or changing PID constants.)</p> <p>Generally when we create commands, we do so using preexisting types of commands, and a set of helpful static methods in a class called <code>Commands</code> that return Commands. (Theoretically, you could also make a whole class for each command, but that's almost never a good idea).</p> <p>Before we talk about types of commands, let's quickly go over what the technical definition of a Command is. The class <code>Command</code> is what all Command classes inherit from, and it has four primary methods that different Command classes override in order to define their behavior:</p> <ul> <li><code>public void initialize()</code><ul> <li>Called when the command is started</li> </ul> </li> <li><code>public void execute()</code><ul> <li>Called every tick (every 0.02 seconds) while the command is running</li> </ul> </li> <li><code>public void end(boolean interrupted)</code><ul> <li>Called when the command is ended</li> <li>Commands can end either because their end condition is met or because they are interrupted by another command on the same subsystem. <code>end</code> takes whether or not the command has been interrupted as an input, so that you can change the end behavior of a command based on whether it reached its end condition.</li> </ul> </li> <li><code>public boolean isFinished()</code><ul> <li>This is the end condition for a command. It is called each tick after a command has been executed, and if it is <code>isFinished</code> returns <code>true</code>, the command is un-scheduled and <code>end(false)</code> is called (<code>false</code> because the command has not been interrupted).</li> </ul> </li> </ul> <p>I used the passive voice for these explanations, but just to be clear, all of these methods are being called by the <code>CommandScheduler</code>, which is in turn called periodically by <code>Robot</code>.</p> <p>So, just to summarize the progression:</p> <ol> <li>A command <code>c</code> is scheduled</li> <li><code>c.initialize()</code> is called</li> <li>Each tick until the command is over:<ol> <li><code>c.execute()</code> is called</li> <li><code>c.isFinished()</code> is called, and if it returns <code>true</code> the command is over</li> </ol> </li> <li><code>c.end(interrupted)</code> is called</li> </ol> <p>Commands also have a set of subsystems that they require.</p> <p>Now, let's go over a two of the most common types of Commands, how they work, and how to make them:</p> <ul> <li>Run command (<code>RunCommand</code>)<ul> <li><code>isFinished()</code> always returns <code>false</code>, so it keeps on running forever until it is interrupted.</li> <li>Constructor: <code>RunCommand(Runnable toRun, Subsystem... requirements)</code><ul> <li>toRun will be run in <code>execute()</code></li> <li><code>requirements</code> is all of the subsystems that the command requires. The <code>...</code> means that you can just add as many as you want.</li> </ul> </li> <li>How to create using <code>Commands</code>: <code>Commands.run(Runnable action, Subsystem... requirements)</code></li> <li>Example: <code>Command toToOrigin = Commands.run(() -&gt; drive.goTo(0, 0), drive)</code></li> </ul> </li> <li>Run once command (<code>InstantCommand</code>)<ul> <li><code>isFinished</code> always returns <code>true</code>, so it stops immediately after just one execution</li> <li>How to create using <code>Commands</code>: <code>Commands.runOnce(Runnable action, Subsystem... requirements)</code></li> <li>Example: <code>Command stop = Commands.runOnce(drive::stop, drive)</code></li> </ul> </li> </ul> <p>We then build on commands like these using various methods that allow us to combine or modify different commands.</p> <p>A nice list of these individual commands can be found under the subclasses of WPILib's Command class.</p> <p>Note: we avoid using specific control commands like <code>PIDCommand</code> or <code>SwerveControllerCommand</code> as they limit our precision and capabilities compared to using their components individually.</p>"},{"location":"reference-sheets/CommandBased/#command-compositions","title":"Command Compositions","text":"<p>Commands can also be chained together to create much larger commands for complex routines. You'll likely be using these a lot:</p> <ul> <li>Parallel Commands - run multiple commands / runnables at once</li> <li>Deadline and Race Commands (different end conditions)</li> <li>Sequential Commands - run commands / runnables after the previous one ends</li> </ul> <p>For more examples, see a good list here.</p>"},{"location":"reference-sheets/CommandBased/#decorators","title":"Decorators","text":"<p>WPILib provides command methods that can chain onto other commands to dynamically create compositions like the one below.</p> <p>These include methods like <code>andThen()</code> and <code>alongWith()</code>, representing the creation of a sequential and parallel command respectively.</p> <p>When properly composed, complex commands can often be read through like plain english, like below:</p> <pre><code>    operator\n        .leftTrigger()\n        .whileTrue(\n            shooting.shootWithPivot(PivotConstants.FEED_ANGLE, ShooterConstants.DEFAULT_VELOCITY));\n    // while the operator controller's left trigger button is held, shoot\n</code></pre> <p>Individual commands and command groups each have their own singular / group of decorators. The majority can be found here.</p> <p>Commands can also be accessed through WPILib's <code>Commands</code> class.</p>"},{"location":"reference-sheets/CommandBased/#triggers","title":"Triggers","text":"<p>A big part of the command-based ecosystem are triggers. Users can bind commands and <code>Runnable</code> actions to triggers, which are run in specified ways when the trigger is activated. </p> <p>Common operations with trigger commands include, but are not limited to:</p> <ul> <li><code>onTrue()</code>, run once on trigger activation</li> <li><code>whileTrue()</code>, run periodically while trigger is active</li> </ul> <p>For instance, the <code>teleop()</code> trigger in <code>Robot.java</code> (and its sisters) run binded commands when teleop mode is activated on the robot (by DriverStation or FMS).</p> <p>See here for examples and specific usage in WPILib.</p>"},{"location":"reference-sheets/CommandBased/#specifics-common-issues","title":"Specifics &amp; Common Issues","text":""},{"location":"reference-sheets/CommandBased/#singular-command-instances","title":"Singular Command Instances","text":"<p>Each instance of a command can only be scheduled once, otherwise risking unpredictable behavior. To remedy this, we create command factories that return new instances of a command each time it is called, like below:</p> <pre><code>    public Command updateSetpoint(double velocity) {\n        return run(() -&gt; hardware.setVelocity(velocity));\n    }\n</code></pre>"},{"location":"reference-sheets/CommandBased/#command-composition-requirements-proxying","title":"Command Composition Requirements &amp; Proxying","text":"<p>When created, command compositions take on the subsystem requirements of all of its parts, sometimes creating undesirable behavior as no other commands can be run on a subsystem even if the composition has sequenced past that point.</p> <p>The current best solution to this (as of 24-25) is command proxying. See the docs for a more in-depth discussion.</p>"},{"location":"reference-sheets/CommandLineNavigation/","title":"Command Line Navigation","text":""},{"location":"reference-sheets/CommandLineNavigation/#introduction","title":"Introduction","text":"<p>The command line interface (CLI), also known as the terminal or shell, is a text-based interface for interacting with your computer's operating system. Instead of using a graphical user interface (GUI) with icons and windows, you type commands to perform actions like navigating directories, creating files, or running programs.</p>"},{"location":"reference-sheets/CommandLineNavigation/#goals","title":"Goals","text":"<p>Familiarity with the following ideas and commands:</p> <ul> <li>How a computer organizes files</li> <li>Command Line shortcuts</li> <li>Basic commands<ul> <li>pwd</li> <li>ls</li> <li>cd</li> <li>mkdir</li> <li>touch/type nul &gt;</li> <li>cat</li> <li>cp</li> <li>mv</li> <li>rm</li> </ul> </li> </ul> <p>This guide is really only scratching the surface on Command Line use, but it should give you what you need to get started.</p>"},{"location":"reference-sheets/CommandLineNavigation/#best-practices","title":"Best Practices","text":"<p>If you're learning this for the first time, follow along! Whenever a new command is taught, try the examples on your own machine.</p>"},{"location":"reference-sheets/CommandLineNavigation/#llms","title":"LLMs","text":"<p>Command Line navigation is an area in which LLMs are incredibly useful. If you ever want to know how to do something on Command Line, ask ChatGPT or Claude!</p>"},{"location":"reference-sheets/CommandLineNavigation/#computer-organization","title":"Computer Organization","text":"<p>Computers organize files and folders in a hierarchical structure, often called a file system. The top-level directory is called the root directory. On Windows, this is typically represented by <code>C:\\</code>, while on Mac and Linux, it's represented by <code>/</code>.</p> <p>Your user account has a home directory where your personal files are stored:</p> <ul> <li>On Mac and Linux: <code>/home/username</code> (often shortened to <code>~</code>)</li> <li>On Windows: <code>C:\\Users\\username</code></li> </ul> <p>That's where the folders that you're used to seeing (Documents, Downloads, etc) are.</p> <p>As you navigate through the file system, you'll be working within a specific directory at any given time. This is called your working directory. When you open a new terminal, it usually starts in your home directory.</p> <p>When referring to directories, there are two special references you'll often encounter: <code>.</code> (dot) refers to the current directory, and <code>..</code> (dot dot) refers to the parent directory (one level up). These are useful for navigating the file system and specifying file paths.</p>"},{"location":"reference-sheets/CommandLineNavigation/#paths","title":"Paths","text":"<p>When referring to files or directories, we use paths. There are two types of paths: absolute and relative.</p> <p>An absolute path provides the complete location of a file or directory from a fixed point in the file system, regardless of the current working directory. This fixed point is typically:</p> <ul> <li>The root directory, represented by <code>/</code> on Mac/Linux or a drive letter (e.g., <code>C:\\</code>) on Windows.</li> <li>The home directory, often represented by <code>~</code> on Unix-like systems.</li> </ul> <p>Examples of absolute paths:</p> <ul> <li><code>/home/username/Documents/file.txt</code> (from root on Unix-like systems)</li> <li><code>C:\\Users\\username\\Documents\\file.txt</code> (from root on Windows)</li> <li><code>~/Documents/file.txt</code> (from home directory)</li> </ul> <p>A relative path, on the other hand, specifies the location of a file or directory relative to the current working directory. It doesn't start with <code>/</code>, a drive letter, or <code>~</code>.</p> <p>For instance, if you're in <code>/home/username</code>, you can refer to a file in your Documents folder as <code>Documents/file.txt</code>. Relative paths often make commands shorter and more portable, especially when working within your own directory structure.</p> <p>And remember, you can use <code>.</code> to refer to the current directory and <code>..</code> to refer to the parent. So if you were in the <code>/home/username/Documents</code>, and you want to refer to a file whose absolute path is <code>/home/username/file.txt</code>, you could do that using <code>../file.txt</code>.</p>"},{"location":"reference-sheets/CommandLineNavigation/#accessing-the-command-line","title":"Accessing the Command Line","text":"<ul> <li>Mac: Open the \"Terminal\" application (found in Applications &gt; Utilities)</li> <li>Windows: Open \"PowerShell\" (or \"Command Prompt\" if your computer does not have \"PowerShell\")<ul> <li>If you end up using \"CommandPrompt\", some of the commands in this guide will not work. When that happens, ask ChatGPT or Claude or another LLM how to translate the command to use in \"CommandPrompt\".</li> </ul> </li> <li>Linux: Open your distribution's terminal application (often accessible with Ctrl+Alt+T)</li> </ul> <p>Once you've got your CLI open, all you need to do to execute a command is type it and hit enter!</p>"},{"location":"reference-sheets/CommandLineNavigation/#command-line-shortcuts","title":"Command Line Shortcuts","text":"<p>These keyboard shortcuts will be very important to efficiently using Command Line. The most important ones are italicized.</p> <ol> <li>Tab Completion: Press the Tab key to autocomplete file names, directory names, and commands. If there are multiple possibilities, press Tab twice to see all options.</li> <li>Command History:<ul> <li>Use the Up and Down arrow keys to navigate through previously used commands.</li> <li>Ctrl + R: Search through command history (start typing to search).</li> </ul> </li> <li>Cursor Movement:<ul> <li>Ctrl + A: Move cursor to the beginning of the line.</li> <li>Ctrl + E: Move cursor to the end of the line.</li> <li>Option + Left/Right Arrow (Mac) or Ctrl + Left/Right Arrow (Windows/Linux): Move cursor word by word.</li> </ul> </li> <li>Editing:<ul> <li>Ctrl + U: Clear the line before the cursor.</li> <li>Ctrl + K: Clear the line after the cursor.</li> <li>Ctrl + W: Delete the word before the cursor.</li> </ul> </li> <li>Process Control:<ul> <li>Ctrl + C: Interrupt (terminate) the current command.</li> <li>Ctrl + Z: Suspend the current command (can be resumed later).</li> </ul> </li> <li>Screen Control:<ul> <li>Ctrl + L: Clear the screen (same as the <code>clear</code> command).</li> </ul> </li> <li>Terminal Output Control:<ul> <li>Ctrl + S: Pause output to the screen.</li> <li>Ctrl + Q: Resume output to the screen.</li> </ul> </li> </ol>"},{"location":"reference-sheets/CommandLineNavigation/#basic-commands","title":"Basic Commands","text":""},{"location":"reference-sheets/CommandLineNavigation/#1-pwd-print-working-directory","title":"1. pwd (Print Working Directory)","text":"<p><code>pwd</code> shows your current location in the file system.</p>"},{"location":"reference-sheets/CommandLineNavigation/#2-ls-list","title":"2. ls (List)","text":"<p><code>ls</code> lists the contents of a directory.</p>"},{"location":"reference-sheets/CommandLineNavigation/#usage","title":"Usage","text":"<p>To list contents of working directory:</p> <pre><code>ls\n</code></pre> <p>To list contents of another directory:</p> <pre><code>ls [path to directory]\n</code></pre>"},{"location":"reference-sheets/CommandLineNavigation/#examples","title":"Examples","text":"<p>Show contents of parent directory:</p> <pre><code>ls ..\n</code></pre> <p>Show contents of parent of parent directory:</p> <pre><code>ls ../..\n</code></pre> <p>Show contents of Documents:</p> <pre><code>ls ~/Documents\n</code></pre>"},{"location":"reference-sheets/CommandLineNavigation/#3-cd-change-directory","title":"3. cd (Change Directory)","text":"<p><code>cd</code> allows you to move between directories.</p>"},{"location":"reference-sheets/CommandLineNavigation/#usage_1","title":"Usage","text":"<p>To move to the home directory:</p> <pre><code>cd\n</code></pre> <p>To move to another directory:</p> <pre><code>cd [path-to-directory]\n</code></pre>"},{"location":"reference-sheets/CommandLineNavigation/#examples_1","title":"Examples","text":"<p>Move to parent directory:</p> <pre><code>cd ..\n</code></pre> <p>Move to Documents:</p> <pre><code>cd ~/Documents\n</code></pre> <p>Move to the parent of the home directory:</p> <pre><code>cd ~/..\n</code></pre> <p>Move back to your home directory:</p> <pre><code>cd\n</code></pre>"},{"location":"reference-sheets/CommandLineNavigation/#4-mkdir-make-directory","title":"4. mkdir (Make Directory)","text":"<p><code>mkdir</code> creates a new directory.</p>"},{"location":"reference-sheets/CommandLineNavigation/#usage_2","title":"Usage","text":"<pre><code>mkdir [path-to-new-directory]\n</code></pre>"},{"location":"reference-sheets/CommandLineNavigation/#examples_2","title":"Examples","text":"<p>Make a new directory in your working directory:</p> <pre><code>mkdir cml-practice\n</code></pre> <p>Make a new directory inside of <code>cml-practice</code>:</p> <pre><code>mkdir cml-practice/foo\n</code></pre> <p>Make a new directory in <code>cml-practice</code>, but do so from within <code>foo</code>:</p> <pre><code>cd cml-practice/foo\nmkdir ../bar\n</code></pre> <p>Make a new directory in Documents:</p> <pre><code>mkdir ~/Documents/cml-practice-documents\n</code></pre>"},{"location":"reference-sheets/CommandLineNavigation/#5-touch-macoslinux-or-type-nul-windows","title":"5. touch (macOS/Linux) or type nul &gt; (Windows)","text":"<p>These commands create a new, empty file.</p>"},{"location":"reference-sheets/CommandLineNavigation/#usage_3","title":"Usage","text":"<p><code>touch</code>:</p> <pre><code>touch [path-to-new-file]\n</code></pre> <p><code>type nul &gt;</code>:</p> <pre><code>type nul &gt; [path-to-new-file]\n</code></pre>"},{"location":"reference-sheets/CommandLineNavigation/#examples_3","title":"Examples","text":"<p>Create a file inside of <code>foo</code> (Mac/Linux):</p> <pre><code>touch cml-practice/foo/file.txt\n</code></pre> <p>Create a file inside of <code>foo</code> (Windows):</p> <pre><code>type nul &gt; cml-practice/foo/file.txt\n</code></pre>"},{"location":"reference-sheets/CommandLineNavigation/#6-cat-concatenate-and-print","title":"6. cat (Concatenate and Print)","text":"<p><code>cat</code> displays the contents of a file.</p>"},{"location":"reference-sheets/CommandLineNavigation/#usage_4","title":"Usage","text":"<pre><code>cat [path-to-file]\n</code></pre>"},{"location":"reference-sheets/CommandLineNavigation/#examples_4","title":"Examples","text":"<p>Before we look at the contents of a file, let's make a file with something in it to see (you don't need to understand exactly what's happening here -- it shouldn't be super useful to you):</p> <pre><code>echo \"Hello world!\" &gt; cml-practice/foo/hello.txt\n</code></pre> <p>(If you're using CommandPrompt, don't include the quotation marks)</p> <p>Now we should have a file <code>cml-practice/foo/hello.txt</code> whose contents is the text \"Hello World!\"</p> <p>Let's look at it:</p> <pre><code>cat cml-practice/foo/hello.txt\n</code></pre>"},{"location":"reference-sheets/CommandLineNavigation/#7-cp-copy","title":"7. cp (Copy)","text":"<p><code>cp</code> copies files or directories.</p>"},{"location":"reference-sheets/CommandLineNavigation/#usage_5","title":"Usage","text":"<p>To copy a file:</p> <pre><code>cp [path-to-source] [path-to-destination]\n</code></pre> <p>If the destination path is a directory, it will copy the source file into that destination directory, with the original file name. If the destination path is to a file name, the contents of the source file will be moved to the destination file.</p> <p>To copy a directory (Mac/Linux):</p> <pre><code>cp -r [path-to-source-dir] [path-to-destination]\n</code></pre>"},{"location":"reference-sheets/CommandLineNavigation/#examples_5","title":"Examples","text":"<p>Copy hello.txt to bar (and then print the contents to confirm that it worked):</p> <pre><code>cp cml-practice/foo/hello.txt cml-practice/bar\ncat cml-pracice/bar/hello.txt\n</code></pre> <p>Copy file.txt to cml-practice/baz.txt (and list the contents of cml-practice to confirm that it worked):</p> <pre><code>cp cml-practice/foo/file.txt cml-practice/baz.txt\nls cml-practice\n</code></pre>"},{"location":"reference-sheets/CommandLineNavigation/#8-mv-move-or-rename","title":"8. mv (Move or Rename)","text":"<p><code>mv</code> moves files or directories. It can also be used to rename files or directories, because renaming something is really just moving its contents to something with a different name.</p>"},{"location":"reference-sheets/CommandLineNavigation/#usage_6","title":"Usage","text":"<p>To move a file or directory:</p> <pre><code>mv [path-to-source] [path-to-destination]\n</code></pre> <p>If the source is a file and the destination is a directory, the file will be moved into that directory. If the source and destination are both files, the contents of the file will be moved to a file at the destination path. If the source is a directory, the destination cannot be a file.</p> <p>With both files and directories, if the source and destination have the same parent directory, the file or directory will effectively just be renamed.</p>"},{"location":"reference-sheets/CommandLineNavigation/#examples_6","title":"Examples","text":"<p>Rename file.txt to new-name.txt (and then verify that it worked):</p> <pre><code>mv cml-practice/foo/file.txt cml-practice/foo/new-name.txt\nls cml-practice/foo\n</code></pre> <p>Make a new directory inside of bar, and then move it to cml-practice (and then verify that it worked):</p> <pre><code>mkdir cml-practice/bar/foobar\nls cml-practice/bar\nmv cml-practice/bar/foobar cml-practice\nls cml-practice\n</code></pre>"},{"location":"reference-sheets/CommandLineNavigation/#9-rm-remove","title":"9. rm (Remove)","text":"<p><code>rm</code> deletes files or directories.</p>"},{"location":"reference-sheets/CommandLineNavigation/#usage_7","title":"Usage","text":"<p>To remove a file:</p> <pre><code>rm [path-to-file]\n</code></pre> <p>To remove an empty directory:</p> <pre><code>rm -d [path-to-empty-dir]\n</code></pre> <p>To remove a directory and its contents:</p> <pre><code>rm -r [path-to-dir]\n</code></pre> <p>Be very careful with rm -r. This will delete everything in a directory, and there is no undo!</p>"},{"location":"reference-sheets/CommandLineNavigation/#examples_7","title":"Examples","text":"<p>Remove cml-pracice/bar/hello.txt:</p> <pre><code>rm cml-pracice/bar/hello.txt\n</code></pre> <p>Remove ~/Documents/cml-practice-documents:</p> <pre><code>rm -d ~/Documents/cml-practice-documents\n</code></pre> <p>Remove the entirety of cml-practice:</p> <pre><code>rm -r cml-practice\n</code></pre>"},{"location":"reference-sheets/ControlTheory/","title":"Control Theory","text":""},{"location":"reference-sheets/ControlTheory/#introduction","title":"Introduction","text":"<p>Control theory focuses on guiding systems from their current state to a desired state by manipulating inputs to achieve specific outputs. This is done by using feedback and feedforward to correct errors and make mechanisms more accurate. This guide will introduce these basic ideas and point you to more detailed resources. Many of the projects you\u2019ll work on will use these concepts, so it's important to understand how they work.</p> <p>To get started, read this document on control systems. It shows how control systems are used in everyday life and why they\u2019re important. It also breaks down basic concepts and uses diagrams to explain how most systems work.</p>"},{"location":"reference-sheets/ControlTheory/#open-vs-closed-loop-control","title":"Open vs. closed loop control","text":"<p>Open-loop control, commonly known as feedforward, functions by sending control signals based on predetermined estimates, not by adjusting for the system's current state. This means it operates without feedback, relying only on initial assumptions about how the mechanism should behave.</p> <p>There are two main types of feedforward: plant inversion and unmodeled dynamics. simply put, plant inversion uses the model to determine the control signals needed to reach the desired outcome. Whereas unmodeled dynamics handles factors not accounted for in the model. </p> <p>As seen below, feedforward is usually depicted as a straight path regardless of the \"loop\" in its name.</p> <p></p> <p>Closed-loop control, on the other hand, incorporates feedback to adjust the system's output in real time. By constantly monitoring the actual performance and comparing it to the desired state, it can correct any discrepancies and respond to disturbances effectively. This dynamic process ensures greater accuracy and reliability in maintaining the intended performance.</p> <p></p> <p>Read this document for specifics on both feedforward and feedback. Near the end, it also goes into specifics on tuning your constant values for feedforward and feedback. For more assistance with tuning, check out the common tuning issues guide.</p>"},{"location":"reference-sheets/ControlTheory/#pid","title":"PID","text":"<p>A PID controller is an optimized <code>feedback</code> system that continuously adjusts output using three terms: Proportional for immediate error, Integral for accumulated error over time, and Derivative for predicting future error trends. This combination allows for precise correction and stable system performance as seen below. It's heavily suggested that you read this document for more details.</p> <p></p>"},{"location":"reference-sheets/ControlTheory/#implementation","title":"Implementation","text":"<p>Actually adding these complicated ideas into code may seem hard, but thankfully it's moslty done for us. Use the following links to add PID, feedforward, and how to combine both the ideas for a near perfect system setpoint following. Do keep in mind that the specific way in which these are implemented may vary depending on the mechanism being used on.  </p>"},{"location":"reference-sheets/ControlTheory/#summary","title":"Summary","text":"<p>Only after you have read all of the linked documents, watch the following video. It acts as a great summary for this whole idea of control theory its used for FRC purposes. You should be able to recall and understand most of the important details mentioned! Video with everything + more (Watch until 9:00).</p> <p>If you want to further indulge yourself into the art of control, there is an amzaing textbook specifically for control theory and its applications for FRC.</p>"},{"location":"reference-sheets/EnvironmentSetup/","title":"Environment Setup","text":""},{"location":"reference-sheets/EnvironmentSetup/#introduction","title":"Introduction","text":"<p>This is a guide to setting up your computer. It includes instructions on organizing files locally, setting up git and Github, setting up an environment to code in Java, and setting up an environment to write robotics-specific code.</p>"},{"location":"reference-sheets/EnvironmentSetup/#goals","title":"Goals","text":"<ul> <li>Create code folder</li> <li>Set up git &amp; Github<ul> <li>Make sure git is installed</li> <li>Make Github account</li> <li>Add PAT</li> </ul> </li> <li>Set up regular VSCode</li> <li>Set up WPILib VSCode</li> </ul>"},{"location":"reference-sheets/EnvironmentSetup/#local-code-organization","title":"Local Code Organization","text":"<p>All of the files on your computer are organized into a tree of directories, or folders. When you use Finder or File Explorer, you are navigating through those directories. </p> <p>Most of the relevant files on your computer are inside of your home directory. The top level contents of your home directory include Downloads, Documents, Desktop, Applications, and other directories that you should be familiar with.</p> <p>When you write code, the files that you write in will exist somewhere on your computer. For the sake of organization, you need to decide where that is.</p> <p>Oftentimes, people will make one directory that contains all of their code. Within that, they might have separate directories for robotics code and other code. And then individual projects are placed inside of those directories.</p> <p>Another option is to just make one directory for robotics, and if you ever want to write non-robotics code, you can make a different directory for that.</p> <p>You can do whichever of those you feel more comfortable with. Or if there's another way you want to organize your code, that's fine -- as long as it's all in its own directory and not on OneDrive or iCloud!</p> <p>Next, you need to decide where you want to put your code/robotics directory. You really only have two reasonable options for this:</p> <ol> <li>Directly in your home directory</li> <li>Inside Documents If you're coding a lot, I'd definitely recommend number 1. Otherwise, either way is fine.</li> </ol> <p>Once you've decided how you want to organize your code on your computer, you have a couple options for how you're actually going to make the directory:</p>"},{"location":"reference-sheets/EnvironmentSetup/#finder-mac-or-file-explorer-windows","title":"Finder (Mac) or File Explorer (Windows)","text":"<p>Open Finder/File Explorer. </p> <p>If you want to put your folder in Documents, open Documents.</p> <p>If you want to put your folder in the home directory, go to the home directory</p> <ul> <li>for Mac: Command + Shift + H</li> <li>for Windows: go to the location bar and enter %USERPROFILE%</li> </ul> <p>Once you're in the right place, create a new folder (right click, press new folder). Give your folder a descriptive name, and make sure it has no spaces.</p> <p>Make sure your folder is easily accessible</p> <ul> <li>for Mac: drag your folder over to the sidebar</li> <li>for Windows: save your folder to quick access</li> </ul>"},{"location":"reference-sheets/EnvironmentSetup/#command-line-mac-windows-linux","title":"Command Line (Mac, Windows, Linux)","text":"<p>Open command line.</p> <ul> <li>for Mac or Linux: open Terminal</li> <li>for Windows: open PowerShell</li> </ul> <p>For each of the next steps, I'm going to give you a line to write in the console that you just pulled up, and explain what it does.</p> <p>Navigate to your home directory (you're probably there already by default, but this will make sure):</p> <pre><code>cd\n</code></pre> <p>Only if you want your directory to be in Documents:</p> <pre><code>cd Documents\n</code></pre> <p>Make the directory:</p> <pre><code>mkdir &lt;name&gt;\n</code></pre> <p>Replace \\ with whatever you want your directory to be called. So if you wanted the name to be \"code\", you'd write <code>mkdir code</code>. Whatever you do, make sure your name has no spaces! <p>Lastly, I highly recommend you go to whatever file navigator you use (Finder, File Explorer, etc) and pin the folder you made so that it's easily accessible. If you're not sure how to do that, read the Finder/File Explorer section.</p>"},{"location":"reference-sheets/EnvironmentSetup/#git","title":"Git","text":"<p>Git is a distributed version control system that helps you track changes in your code over time. It allows multiple people to work on the same project simultaneously and merge their changes seamlessly. Git is essential for collaborative coding and is widely used in software development, including robotics projects.</p>"},{"location":"reference-sheets/EnvironmentSetup/#checking-if-git-is-installed","title":"Checking if Git is installed","text":"<p>Before installing Git, let's check if it's already installed on your system.</p>"},{"location":"reference-sheets/EnvironmentSetup/#for-mac-and-linux","title":"For Mac and Linux:","text":"<ol> <li>Open Terminal</li> <li>Type the following command and press Enter:    <code>git --version</code></li> <li>If Git is installed, you'll see a version number (e.g., \"git version 2.30.1\")</li> <li>If you see \"command not found\", you'll need to install Git</li> </ol>"},{"location":"reference-sheets/EnvironmentSetup/#for-windows","title":"For Windows:","text":"<ol> <li>Open PowerShell</li> <li>Type the following command and press Enter:    <code>git --version</code></li> <li>If Git is installed, you'll see a version number</li> <li>If you see an error message, you'll need to install Git</li> </ol>"},{"location":"reference-sheets/EnvironmentSetup/#installing-git","title":"Installing Git","text":"<p>If Git is not installed on your system, follow these steps:</p>"},{"location":"reference-sheets/EnvironmentSetup/#for-mac","title":"For Mac:","text":"<ol> <li>Install Homebrew if you haven't already (visit https://brew.sh/ for instructions)</li> <li>Open Terminal</li> <li>Run the following command:    <code>brew install git</code></li> </ol>"},{"location":"reference-sheets/EnvironmentSetup/#for-windows_1","title":"For Windows:","text":"<ol> <li>Visit https://git-scm.com/download/win</li> <li>Download the latest version for your system (64-bit or 32-bit)</li> <li>Run the installer and follow the prompts (you can use the default settings)</li> </ol>"},{"location":"reference-sheets/EnvironmentSetup/#for-linux","title":"For Linux:","text":"<p>For Ubuntu or Debian-based distributions:</p> <ol> <li>Open Terminal</li> <li>Run the following commands:    <code>sudo apt update    sudo apt install git</code></li> </ol> <p>For other distributions, consult your package manager's documentation.</p>"},{"location":"reference-sheets/EnvironmentSetup/#creating-a-github-account","title":"Creating a GitHub Account","text":"<p>GitHub is a web-based platform that uses Git for version control. It's where you'll store your code repositories online.</p> <ol> <li>Visit https://github.com/</li> <li>Click \"Sign up\" in the top right corner</li> <li>Follow the prompts to create your account</li> </ol>"},{"location":"reference-sheets/EnvironmentSetup/#configuring-git","title":"Configuring Git","text":"<p>After installing Git and creating a GitHub account, you need to configure Git with your name, email, and preferred code editor:</p> <ol> <li>Open Terminal (Mac/Linux) or PowerShell (Windows)</li> <li>Set your name:    <code>git config --global user.name \"Your Name\"</code></li> <li>Set your email (use the same email as your GitHub account):    <code>git config --global user.email \"youremail@example.com\"</code></li> <li>Set your preferred code editor (for our purposes, this will be VSCode):    <code>git config --global core.editor \"code --wait\"</code></li> </ol>"},{"location":"reference-sheets/EnvironmentSetup/#authentication-personal-access-token-pat","title":"Authentication: Personal Access Token (PAT)","text":"<p>GitHub now requires a Personal Access Token for authentication instead of a password when using Git from the command line. Here's how to set it up:</p> <ol> <li>Go to GitHub and log in</li> <li>Click on your profile picture in the top-right corner and select \"Settings\"</li> <li>Scroll down to \"Developer settings\" in the left sidebar</li> <li>Click on \"Personal access tokens\" and then \"Generate new token\"</li> <li>Give your token a descriptive name, set the expiration to the maximum amount (1 year), and select the appropriate scopes (at minimum, select \"repo\")</li> <li>Click \"Generate token\" at the bottom of the page</li> <li>Copy the generated token immediately (you won't be able to see it again)</li> <li>Open Terminal (Mac/Linux) or PowerShell (Windows)</li> <li>Run the following command:</li> </ol> <pre><code>git ls-remote https://github.com/fake-username/fake-repo-name.git\n</code></pre> <ol> <li>When prompted for your password, enter your PAT instead.</li> <li>If you got a \"Repository not found\" error, everything went right! If you get If you get an \"Authentication failed\" error, double-check your PAT and try again.</li> <li>On most modern systems, Git will automatically store your credentials after you've entered them once. If, however, you find that you're being asked for your PAT repeatedly, you may need to set up a credential helper:</li> </ol> <p>For Mac/Linux:</p> <pre><code>git config --global credential.helper store\n</code></pre> <p>For Windows:</p> <pre><code>git config --global credential.helper wincred\n</code></pre> <p>Note: There are other authentication methods available, such as SSH keys, but PAT is recommended for its simplicity and security. If you're interested in exploring other options, you can refer to GitHub's documentation on authentication.</p>"},{"location":"reference-sheets/EnvironmentSetup/#visual-studio-code-not-wpilib","title":"Visual Studio Code (not WPILib)","text":"<p>This is going to be for writing non-robotics code. For instance, you can use regular VSC for Java101 and Java102. If you'd rather not have this on your computer, feel free to skip this step.</p> <ol> <li>Download the latest version of the Java Development Kit (JDK). This is what will allow you to actually develop and run code in Java.<ol> <li>Once you've downloaded an installer, click on it and follow the instructions.</li> </ol> </li> <li>Download VSCode here.</li> <li>Once VSCode is installed, open it.</li> <li>Install the Java Extension Pack:<ul> <li>Click on the Extensions icon in the left sidebar (it looks like four squares)</li> <li>In the search bar, type \"Extension Pack for Java\"</li> <li>Look for the package by Microsoft and click \"Install\"</li> <li>This pack includes several useful extensions for Java development, including the Language Support for Java by Red Hat, Debugger for Java, Java Test Runner, and Maven for Java</li> </ul> </li> <li>Optional: Install Git Graph:<ul> <li>In the Extensions sidebar, search for \"Git Graph\"</li> <li>Look for the extension by mhutchie and click \"Install\"</li> <li>This extension provides a graphical view of your Git repository, which can be very helpful when working with version control</li> </ul> </li> </ol>"},{"location":"reference-sheets/EnvironmentSetup/#wpilib","title":"WPILib","text":"<ol> <li>Follow this guide to install WPILib (we use Java, so ignore the additional C++ installation)</li> <li>If you have a school laptop and cannot find WPILib VSCode after install, refer to the FAQ.</li> <li>Optional: Change the WPILib VSCode icon to distinguish from regular VSCode<ol> <li>Download the WPILib logo</li> <li>Replace the icon:<ul> <li>For Windows:<ol> <li>Right-click on the WPILib VSCode shortcut</li> <li>Select \"Properties\"</li> <li>Click \"Change Icon\"</li> <li>Browse to the downloaded WPILib logo and select it</li> <li>Click \"OK\" to apply the changes</li> </ol> </li> <li>For Mac:<ol> <li>Locate the WPILib VSCode app in Finder</li> <li>Right-click (or Control-click) on the app and select \"Get Info\"</li> <li>Drag the downloaded WPILib logo onto the icon in the top-left corner of the Get Info window</li> </ol> </li> <li>For Linux:<ol> <li>Locate your .desktop file for WPILib VSCode (usually in ~/.local/share/applications/ or /usr/share/applications/)</li> <li>Open the .desktop file with a text editor</li> <li>Find the line starting with \"Icon=\"</li> <li>Replace the value with the full path to your downloaded WPILib logo</li> <li>Save the file and refresh your desktop environment</li> </ol> </li> </ul> </li> </ol> </li> <li>Install additional extensions:<ul> <li>Open WPILib VSCode</li> <li>Click on the Extensions icon in the left sidebar (it looks like four squares)</li> <li>Install \"Test Runner for Java\" by Microsoft</li> <li>Optionally: Install \"Git Graph\" by mhutchie</li> </ul> </li> </ol>"},{"location":"reference-sheets/EnvironmentSetup/#a-secret","title":"A Secret","text":"<p>I didn't write the git section. I also didn't write several parts of the VSCode and WPILib sections. Instead, I prompted Claude to do it for me.</p> <p>The moral of this story is that chat bots like Claude and ChatGPT are fantastic resources when used well. And getting help with git or command line or installing things are all great uses for AI.</p>"},{"location":"reference-sheets/EnvironmentSetup/#faq","title":"FAQ","text":"<ul> <li>My VSCode terminal won't recognize Git!<ul> <li>Refer to the git configuration section, particularly about setting preferred code editor.</li> </ul> </li> <li>I can't find my WPILib VSCode install in Windows search!<ul> <li>This is a known issue for school laptops, which do not have the admin permissions needed to create necessary shortcuts.</li> <li>You must manually find the <code>/wpilib/YEAR/vscode</code> directory; its default location is in <code>C:/Users/Public</code>.<ul> <li>Alternatively, find a searchable WPILib-related file, right click on it, and click <code>Open File Location</code>. If it leads to a shortcut, repeat the step; if you've done it right, you should be in the <code>/wpilib</code> folder.</li> </ul> </li> <li>After locating the directory, find <code>Code.exe</code>, and drag it to your taskbar. You should now have easy access to WPILib VSCode.</li> <li>Feel free to make a shortcut wherever you would like and ask for help if you need it - don't spend too much time here!</li> </ul> </li> </ul>"},{"location":"reference-sheets/FileStructure/","title":"File Structure","text":""},{"location":"reference-sheets/FileStructure/#introduction","title":"Introduction","text":"<p>This guide explains the structure of a typical robotics project, focusing on how files and directories are organized to maintain a clear codebase. It covers the distribution of library versus robot-specific code and the purpose of each major file. </p> <p>All of the source code for a project is in the src folder. Within that folder, there is the following directory structure:</p> <p></p> <p>There are two top level directories under <code>src</code>: <code>main</code>, for code that runs on the robot, and <code>test</code>, for unit tests.</p> <p>We're going to ignore the <code>deploy</code> directory, since it isn't very relevant to us right now. That leaves us with the contents of <code>main/java</code> and <code>test/java</code> (both of which contain Java files). The robot code in <code>main/java</code> is split into a <code>lib</code> folder, which contains library code that is not specific to one particular robot, and a <code>robot</code> folder, which contains the code to control a particular robot. Classes in the robot folder generally use lib classes.</p> <p>You may notice that the <code>test/java</code> directory actually has the same structure. This is because our <code>test</code> folder aims to test code in <code>main</code>, and so inside of <code>test</code> we mirror the structure of <code>main</code>. If we are a file <code>Foo.java</code> at the address <code>main/java/lib/Foo.java</code>, our test for that file would be at the address <code>test/java/lib/FooTest.java</code>.</p> <p>Now, let's look at a tree that includes the actual files as well as directories:</p> <p></p> <p>There's a lot here, but we'll go through it piece by piece.</p> <p>One thing you might notice is that the <code>lib</code> folders are very populated. That's because one of the main points of using this template is that it has library code from the SciBorgs, which you can use in your project. You will not be writing code in the <code>lib</code> folders, but you will be using the utilities from those folders. But you don't have to worry about that right now, we'll introduce specific library code when it is relevant.</p> <p>So we're just going to focus on the contents of the <code>robot</code> directories. Let's start with <code>main/java/robot</code>:</p> <ul> <li><code>Constants.java</code>: contains constant values that we use in our code. It can have things like field measurements, robot dimensions, etc.<ul> <li>Constant names are written in all caps with underscores between words (i.e. MAX_SPEED)</li> <li>Currently, there is one constant in this file, called PERIOD (the value is 0.2 seconds). The PERIOD or tick rate represents how often the code is run. In this case, the roboRIO runs our code every 0.2 seconds.</li> </ul> </li> <li><code>Main.java</code>: the <code>main</code> function in this file is what is actually run when the code starts up. You basically don't have to think about it at all.</li> <li><code>Ports.java</code>: this is where we store the ports of our electrical components. More on this soon!<ul> <li>Since you won't be connecting to a physical robot for this project, you'll be making up random port numbers.</li> </ul> </li> <li><code>Robot.java</code>: this is the center of the robot code. <code>Robot.java</code> contains instances of all of the subsystems and the Xbox controllers. It runs the CommandScheduler. In fact, all that the <code>Main.java</code> really does is start up <code>Robot.java</code>.</li> </ul> <p>As you go through a project, you will create more directories and files within <code>main/java/robot</code> for your robot code.</p> <p>Next up, we'll go over <code>test/java/robot</code>. This directory only has one file currently:</p> <ul> <li><code>RobotTest.java</code>: If you look at the contents of this file, it is a test class with a single test called <code>initialize</code>. All that this test does is create a new instance of <code>Robot.java</code>. So this test will only fail if initializing the robot throws an error. This tiny little test is actually very important, because it will catch if there is a <code>NullPointerException</code> in our code (if we try to use something that isn't initialized).</li> </ul> <p>In a project, you will add files to <code>test/java/robot</code> to test the new classes that you create in <code>main/java/robot</code>. And you'll be testing more specific behavior than <code>RobotTest.java</code> does!</p>"},{"location":"reference-sheets/GitGuide/","title":"Git Guide","text":""},{"location":"reference-sheets/GitGuide/#introduction","title":"Introduction","text":"<p>GitHub is a platform for managing and sharing code, built on top of Git, a version control system. It lets you track changes to your code, work on different features or fixes in separate branches, and merge everything together without losing progress. It\u2019s especially useful for teams, making it easy to review code, resolve conflicts, and collaborate on projects efficiently. </p> <p>This guide covers how to use GitHub to manage code effectively, best practices to keep in mind while using git, and a cheat sheet with all the important commands. It's also recommended that you checkout this intro to git for a more indepth analysis on the inner workings of git. </p>"},{"location":"reference-sheets/GitGuide/#best-practices","title":"Best Practices","text":"<p>A list of everything you should and are expected to do when working with git. </p>"},{"location":"reference-sheets/GitGuide/#use-branches-effectively","title":"Use branches effectively","text":"<p>Always create a new branch for each task, feature, or fix. This keeps your work isolated, makes collaboration easier, and helps prevent conflicts with the main branch.</p>"},{"location":"reference-sheets/GitGuide/#merge-regularly","title":"Merge regularly","text":"<p>Merge changes back into the main branch often, once they\u2019re tested and complete. Regular merging keeps the main branch current and helps avoid larger conflicts later on.</p>"},{"location":"reference-sheets/GitGuide/#commit-and-push-frequently","title":"Commit and push frequently","text":"<p>Save and push your changes to the remote repository consistently. This keeps your progress backed up and ensures your team has access to the latest updates.</p>"},{"location":"reference-sheets/GitGuide/#review-code-thoroughly","title":"Review code thoroughly","text":"<p>Review and discuss changes before merging them into the main branch. This helps catch errors, improve code quality, and ensure everyone is aligned.</p>"},{"location":"reference-sheets/GitGuide/#cheat-sheet","title":"Cheat Sheet","text":"<p>Simple list of all the most commonly used commands.</p>"},{"location":"reference-sheets/GitGuide/#cloning","title":"Cloning","text":"<p><code>git clone &lt;repository-link | repository-name&gt; [repository-folder]</code></p> <p>Copies the repo (repository) from github and puts it in a folder on your computer. It will put it in a folder with the name of the repository unless you specify a folder afterwards. Note that the default place of creation (no folder location arg) is the terminal's working directory.</p>"},{"location":"reference-sheets/GitGuide/#committing","title":"Committing","text":"<p><code>git commit [-m &lt;message&gt;]</code></p> <p>Every commit in GitHub you can think of as saving your progress. Although we\u2019d like for our commit messages to be as descriptive as possible, being too detailed would be inappropriate as nobody would want to read such long commit messages. Try to limit your message lengths to at most a sentence, or make it like a title.</p> <p><code>git commit -m \u201cdecreased code duplication in Robot.java\u201d</code></p> <p>However, before you can commit, you need to \u201cmark\u201d the files you would like to save. Only marked files will be saved. To mark a file you will need to <code>git add</code> modified files. For example, to add all changed files in your current directory, you may use:</p> <p><code>git add .</code></p>"},{"location":"reference-sheets/GitGuide/#pulling","title":"Pulling","text":"<p><code>git pull</code></p> <p>Copies any new commits that are on the remote GitHub repo to your local repo and attempts to merge its changes into your local repository.</p>"},{"location":"reference-sheets/GitGuide/#pushing","title":"Pushing","text":"<p><code>git push</code></p> <p>Sends any commits you\u2019ve made to your local repo to GitHub.</p>"},{"location":"reference-sheets/GitGuide/#status","title":"Status","text":"<p><code>git status</code></p> <p>Tells you what files have been committed and added. It is very helpful and pretty self-explanatory once you run it.</p>"},{"location":"reference-sheets/GitGuide/#stashing","title":"Stashing","text":"<p><code>git stash</code> </p> <p>Temporarily saves your uncommitted changes so you can work on something else without losing progress.  </p> <p><code>git stash apply</code> </p> <p>Restores your stashed changes when you're ready to continue working on them.</p>"},{"location":"reference-sheets/GitGuide/#checkout","title":"Checkout","text":"<p><code>git checkout &lt;branch-name&gt;</code></p> <p>Moves you to the specified branch.</p> <p><code>git checkout -b &lt;new-branch-name&gt;</code></p> <p>Creates that branch and moves you to it. This is equivalent to:</p> <ul> <li><code>git branch ball-counter</code></li> <li><code>git checkout ball-counter</code></li> </ul>"},{"location":"reference-sheets/GitGuide/#merging","title":"Merging","text":"<p><code>git merge &lt;branch-to-pull-changes-from&gt;</code></p> <p>Merges a branch into your branch. That is, changes from the specified branch will be added to your branch, and not the other way around.</p>"},{"location":"reference-sheets/GitGuide/#avoiding-merge-conflicts","title":"Avoiding merge conflicts","text":"<p>Here are some practices that will minimize your risk of merge conflicts:</p> <ul> <li>pull before you push</li> <li>in fact, each time you sit down to write code, pull first!</li> <li>if you are working on a branch off of main, merge changes from main into your branch consistently</li> </ul> <p>But even if you're extremely careful, you'll have a hard time avoiding merge conflicts altogether.</p>"},{"location":"reference-sheets/GitGuide/#resolving-merge-conflicts","title":"Resolving merge conflicts","text":"<p>Let\u2019s say that you\u2019re editing a repo in your local remote, but origin gets updated while you\u2019re still writing. Better yet, it just so happens that the updated files include the file that you\u2019re working on right now! Try to pull, and then you\u2019re thrown a merge conflict.</p> <p>To deal with the merge conflict, follow this GitHub guide.</p> <p>If you're using VSCode, they also have a handy GUI for resolving merge conflicts!</p>"},{"location":"reference-sheets/Sensors/","title":"Sensors","text":""},{"location":"reference-sheets/Sensors/#fundamentals-of-sensors","title":"Fundamentals of Sensors","text":"<p>This aims to be an brief reference to the different sensors that you will most commonly see and use on the robot. For further details, see the linked materials or consult your favorite search engine.</p>"},{"location":"reference-sheets/Sensors/#encoders","title":"Encoders","text":"<p>They measure rotation. Many brushless motors have encoders integrated inside of them, while others can be found outside of the robot. Most measure what is effectively rotational displacement, as encoders read negative values from relative backwards movement.</p> <p>All encoders have some sort of default unit. Various vendors will have different methods of changing the units returned; read their docs!</p>"},{"location":"reference-sheets/Sensors/#relative-encoders","title":"Relative Encoders","text":"<p>When powered on, its distance measurement will read 0. The zero-point will change on code boot, making its measurements \"relative\" to whenever it started.</p>"},{"location":"reference-sheets/Sensors/#absolute-encoders","title":"Absolute Encoders","text":"<p>Has a set zero point. Will always know where it is, even between code deploys.</p>"},{"location":"reference-sheets/Sensors/#gyroscope","title":"Gyroscope","text":"<p>It measures the rate of rotation of whatever plane it is on (and sometimes its relative axes). Usually found on the base of the drivetrain.</p>"},{"location":"reference-sheets/Sensors/#beambreaks","title":"Beambreaks","text":"<p>Detect if something has passed through them. Two key components: a part that shoots a ray of light, and a receiver. When the receiver no longer detects light, a signal is returned.</p> <p>For our specific hardware, beambreak sensors return true when unblocked, and false when blocked.</p>"},{"location":"reference-sheets/Sensors/#cameras","title":"Cameras","text":"<p>Using the known position of a camera and the known position of targets in its view, the target-relative and field-relative position of a robot can be calculated. These can be used to auto-correct odometry, auto-aim towards a target, or automate movement entirely.</p>"},{"location":"reference-sheets/Sensors/#interactions-with-software","title":"Interactions with Software","text":"<p>From a code perspective, nearly all will be integrated into hardware (that can be interacted with their apis) or plugged into the RoboRIO (that can be interacted with using built-in WPILib classes, like <code>RelativeEncoder</code> or <code>DigitalInput</code>).</p>"},{"location":"reference-sheets/Simulation/","title":"Simulation","text":""},{"location":"reference-sheets/Simulation/#robot-simulation","title":"Robot Simulation","text":"<p>Simulation in WPILib allows for code and logic to be tested onboard your computer, rather than physical hardware. It's exceptionally useful for when mechanical hasn't finished the robot, but you have code to run!</p> <p>There are a few different facets of simulation to take note of before you can start, including:</p> <ul> <li>The Simulation GUI</li> <li>WPILib's simulation classes</li> <li>Physics simulators</li> <li>Mechanism2d</li> <li>Field2d</li> <li>Logging &amp; Dashboards</li> </ul>"},{"location":"reference-sheets/Simulation/#logging-dashboards","title":"Logging &amp; Dashboards","text":"<p>In testing, it is common to want to directly observe current or past robot measurements and values in order to tune your systems or debug. This is also incredibly important when working with simulation, as you otherwise have no reference to what is going on without a physical robot.</p> <p>For more details, visit our doc.</p>"},{"location":"reference-sheets/Simulation/#simulation-classes","title":"Simulation Classes","text":"<p>This section will heavily reference the WPILib docs here.</p> <p>Before doing anything with simulation, make sure desktop support is turned on. Follow these instructions. Use the next doc as reference for the GUI when working with it (same as above).</p> <p>WPILib contains generic simulation classes for different mechanisms (like <code>ElevatorSim</code>) based on physical details and constraints about your system. You can see a full list of them and examples on using them here.</p>"},{"location":"reference-sheets/Simulation/#widgets","title":"Widgets","text":"<p>There's also the widget classes <code>Field2d</code> and <code>Mechanism2d</code>, which respectively allow for pixel representations of the field and parts of mechanisms.</p> <p>Physical objects, like game pieces, wheels, the drivetrain, etc., can be added to a Field2d object, allowing for digital representations of a real-life field. Here's more on how you can use it.</p> <p>Mechanism2ds allow for block representations of mechanisms. This is most commonly used for simulating arms and elevators. See the docs for usage details and further clarifications.</p>"},{"location":"reference-sheets/Telemetry/","title":"Telemetry","text":""},{"location":"reference-sheets/Telemetry/#telemetry","title":"Telemetry","text":""},{"location":"reference-sheets/Telemetry/#the-art-of-logging-and-log-viewing","title":"The art of logging and log-viewing","text":"<p>In testing (real or simulated), it is common to want to directly observe robot measurements and values in order to tune your systems and debug. Rather than looping print statements, WPILib provides interfaces allowing certain information to be logged while the robot runs.</p> <p>Loggers send data to NetworkTables, which can be read while running or stored for later viewing in log files.</p> <p>Only classes that implement <code>Sendable</code> can be sent over NetworkTables; see here for more details.</p> <p>For more in-depth information on the inner workings, visit the docs.</p>"},{"location":"reference-sheets/Telemetry/#logging-libraries","title":"Logging libraries","text":"<p>Logging libraries, third-party or WPILib-made, are not monolithic. Some are annotation-based (using Java <code>@Annotations</code>), while others are framework-based. All are unique; a nice list of them can be found here.</p> <ul> <li>Monologue (we use this!)</li> <li>Epilogue (official WPILib)</li> <li>AdvantageKit</li> <li>URCL</li> </ul>"},{"location":"reference-sheets/Telemetry/#dashboards","title":"Dashboards","text":"<p>There are two types of dashboards: driving and programming. We'll be talking about the ones related to programming.</p> <p>These programs allow you to view data over NetworkTables in real time, allowing you to see logged data while working on a real or simulated robot. These will be your main tools for debugging.</p> <p>Here's a nice list of them. We love AdvantageScope: it does both!</p>"},{"location":"reference-sheets/Telemetry/#log-viewers","title":"Log Viewers","text":"<p>Log viewers will pull measurements from log files and most commonly allow you to graph data or visualize them in some way. These are especially useful for direct post-match debugging, given you have the ability to process and debug with the data formats.</p> <p>See this doc for more information.</p>"},{"location":"reference-sheets/Trigonometry/","title":"Trig Guide","text":""},{"location":"reference-sheets/Trigonometry/#introduction","title":"Introduction","text":"<p>This is a basic overview of simple trig that you might need to use for robotics.</p>"},{"location":"reference-sheets/Trigonometry/#prerequisites","title":"Prerequisites","text":"<ul> <li>Algebra 1 - understanding of functions, cartesian coordinate grid</li> <li>Basic geometry - basics of angles, right triangles, and circles</li> </ul>"},{"location":"reference-sheets/Trigonometry/#radians","title":"Radians","text":"<p>You are probably most familiar with angles being measured in degrees, where a right angle is 90\u00b0, and a full circle is 360\u00b0. However, the unit of degrees is somewhat arbitrary. Why should a degree be 1/360 of a circle, and not 1/180, or 1/2?</p> <p>There's another common unit for angles that are less arbitrary, called radians.</p> <p>360\u00b0 is $2\\pi$ radians. For a unit circle (a circle of radius 1 centered at the origin), $2\\pi$ is also the circumference of a circle (circumference = $2\\pi r$ ). And in fact, for any sector of a unit circle with an angle of $\\theta$ radians, the circumference is also $\\theta$!</p> <p></p> <p>And if $theta$ is 1 radian, then that length is 1 unit.</p> <p>We can generalize this to non-unit circles, and say that a radian is the angle created when the radius of a circle is wrapped around the circumference.</p> <p></p> <p>We sometimes use rad as an abbreviation for radians, and sometimes use no unit symbol at all.</p>"},{"location":"reference-sheets/Trigonometry/#converting-degrees-to-radians","title":"Converting Degrees to Radians","text":"<p>With the equation 360\u00b0 = 2\u03c0 rad, you can convert between degrees and radians: $1\u00b0 = \\frac{\u03c0}{180}\\hspace{0.1cm} rad$, or $1 \\hspace{0.1cm}rad = \\frac{180}{\u03c0}\u00b0$</p> <p>There also exists a conversion method in Java, so you don't have to type out all the calculations:</p> <pre><code>Math.toDegrees(angle); // angle is in radians, and the output is degrees\nMath.toRadians(angle); // angle is in degrees, and the output is radians\n</code></pre>"},{"location":"reference-sheets/Trigonometry/#angles-in-right-triangles","title":"Angles in Right Triangles","text":"<p>We know that a right triangle is defined by a triangle containing a right angle (90\u00b0 or $\\pi$/2 rad). If you know one of the other angles of the triangle, then you know all 3 angles (ex. if you know that a right triangle contains a 50\u00b0 angle, you know the missing angle is 40\u00b0, since the interior angles of all triangles sum to 180\u00b0).</p> <p>Another property of right triangles is the ability to find the ratio of a leg over the hypotenuse as long as you know one of the angles (that's not the right angle). This helps explain why this is the case.</p> <p>So as long as you know an angle of the right triangle, and a side length, you can find the lengths of each side, and the angles of each vertex.</p> <p>The trigonometric functions take the angle as the input, and output specific ratios ($\u03b8$ represents an angle):</p> <p></p> <ul> <li>$\\sin(\\theta) = \\frac{Opposite}{Hypotenuse}$ - written as sine</li> <li>$\\cos(\\theta) = \\frac{Adjacent}{Hypotenuse}$ - written as cosine</li> <li>$\\tan(\\theta) = \\frac{Opposit}{Adjacent}$ also equal to $\\frac{\\sin(\\theta)}{\\cos(\\theta)}$ - written as tangent</li> </ul> <p>A popular mnemonic to memorize these functions is SOH-CAH-TOA, since:</p> <ul> <li>Sine = Opposite/Hypotenuse</li> <li>Cosine = Adjacent/Hypotenuse</li> <li>Tangent = Opposite/Adjacent</li> </ul> <p>If you rearrange these slightly, you get that:</p> <ul> <li>$\\sin(\\theta)$ $\\times$ Hypotenuse = Opposite</li> <li>$\\cos(\\theta)$ $\\times$ Hypotenuse = Adjacent</li> </ul> <p>Those are examples of equations you can use to find side lengths of a right triangle once you have one side and an angle (these particular formulas will also come back later).</p>"},{"location":"reference-sheets/Trigonometry/#angles-in-unit-circle","title":"Angles in Unit Circle","text":"<p>So, the truth is, the definitions we just gave you for $\\sin$, $\\cos$ and $\\tan$. What if our angle isn't acute? Then it's never part of a right triangle, so we can't just use SOH CAH TOA.</p> <p>To find the complete definition of these trig functions, let's look at a unit circle again. </p> <p></p> <p>In the image above, there is a triangle inscribed in the first quadrant of the unit circle, with an  angle $t$ at the vertex at the origin. The angle adjacent to $t$ is $x$, and the opposite angle is $y$. It's a unit circle, so the hypotenuse is 1.</p> <p>We can use that information to calculate the trig functions for t: $\\cos(t)$ = $x$ $\\sin(t)$ = $y$</p> <p>You can also see this labeled on the diagram. And it turns out, this is the full definition of the trig functions.</p> <p>The coordinates of any point on the unit circle are ($\\cos(\\theta)$, $\\sin(\\theta)$ ), where $\\theta$ is the angle from the positive x axis to the point. And $\\tan(\\theta)$ is still $\\sin(\\theta)$ / $\\cos(\\theta)$.</p> <p></p> <p>This definition works for obtuse angles as well as acute angles. Let's look at a point in the second quadrant:</p> <p></p> <p>The coordinates of this point B are still ($\\cos(\\theta)$, $\\sin(\\theta)$ ). As you can see, the x value is negative, so cosine of an angle in the second quadrant must be negative. The y value is still positive though, so sine of an angle in the second quadrant is positive.</p> <p>You can do similar evaluations in the other quadrants. Ultimately, you'll find that: - cosine is positive in I and IV - sine is positive in I and II - tangent is positive in I and III</p> <p>If thinking in terms of right triangles was helpful to you, you can imagine dropping a line from B to the x axis to create a triangle, and consider the x length (adjacent) to be negative in quadrants II and III, and the y lengths to be negative in quadrants III and IV, even though we generally consider all lengths to be positive. </p> <p>To wrap up, we'll turn to the values of trig functions for the angles 0, $\\pi$/2, $\\pi$, and $3 \\pi$/2 (or 0\u00b0, 90\u00b0, 180\u00b0, 270\u00b0).</p> <p>Let's look back to our unit circle:</p> <p></p> <p>As you can see, at 0 the coordinates are (1, 0), so we know that: $\\cos(0)$ = $1$ $\\sin(0)$ = $0$ $\\tan(0)$ = $0$ / $1$ = $0$</p> <p>At $\\pi$/2, the coordinates are (0, 1): $\\cos(\\pi / 2)$ = $0$ $\\sin(\\pi / 2)$ = $1$ $\\tan(\\pi / 2)$ = $1$ / $0$ = undefined</p> <p>So $\\tan$ actually doesn't exist at $\\pi/2$! This is also true for $3\\pi / 2$</p> <p>I'll let you figure out the rest of the trig functions for the $\\pi$ and $3\\pi / 2$.</p>"},{"location":"reference-sheets/Trigonometry/#code-representation","title":"Code Representation","text":"<p>In Java, the <code>Math</code> library has methods for these trig functions:</p> <pre><code>Math.cos(angle);\nMath.sin(angle);\nMath.tan(angle);\n</code></pre> <p>Keep in mind that these functions take in radians.</p>"},{"location":"reference-sheets/Trigonometry/#inverse-trig-functions","title":"Inverse Trig Functions","text":"<p>There are also the inverse trig functions, where if you input the ratio of the leg opposite of an unknown angle $\u03b8$ over the hypotenuse of the triangle, the output is the angle:</p> <ul> <li>$\\sin^{-1}(\\sin(\\theta)) = \\theta$ - written out as arcsine</li> <li>$\\cos^{-1}(\\cos(\\theta))$ - written out as arccosine</li> <li>$\\tan^{-1}(\\tan(\\theta))$ - written out as arctangent</li> </ul> <p>And, inversely:</p> <ul> <li>$sin(sin^{-1}(\\theta)) = \\theta$</li> <li>etc</li> </ul> <p>In Java, the inverse functions are written like this:</p> <pre><code>Math.asin(ratio);\nMath.acos(ratio);\nMath.atan(ratio);\n</code></pre> <p>But keep in mind that these are not perfect inverses. The trig functions are periodic. Which is to say, they repeat over and over again. We've so far only used angles between 0 and 2$\\pi$, but we didn't have to do that. We could have found $\\cos(3\\pi)$, for instance. If you picture $3\\pi$ on the unit circle, it's in the same place as $\\pi$. So $\\cos(3\\pi)$ = $\\cos(\\pi)$ = $-1$. And this is true for an infinite number of different angles.</p> <p>So you can't actually find just one angle that will give you a particular cosine value. If you tried $\\arccos(-1)$, for instance, that could be $-\\pi$ or $\\pi$ or $3\\pi$ etc. To clear up this ambiguity, the ranges of the inverse trig functions are limited to just one period:</p> <ul> <li>$sin^{-1}(\\theta)$ returns values from $-\\frac{\\pi}{2}$ to $\\frac{\\pi}{2}$</li> <li>$cos^{-1}(\\theta)$ returns values from $0$ to $\\pi$</li> <li>$tan^{-1}(\\theta)$ returns values from $-\\frac{\\pi}{2}$ to $\\frac{\\pi}{2}$</li> </ul>"}]}